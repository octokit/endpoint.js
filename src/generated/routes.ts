// DO NOT EDIT THIS FILE
import { Url, Headers, EndpointRequestOptions } from "../types";

export interface Routes {
  "GET /events": [
    ActivityListPublicEvents_Options,
    ActivityListPublicEvents_RequestOptions
  ];
  "GET /repos/:owner/:repo/events": [
    ActivityListRepoEvents_Options,
    ActivityListRepoEvents_RequestOptions
  ];
  "GET /networks/:owner/:repo/events": [
    ActivityListPublicEventsForRepoNetwork_Options,
    ActivityListPublicEventsForRepoNetwork_RequestOptions
  ];
  "GET /orgs/:org/events": [
    ActivityListPublicEventsForOrg_Options,
    ActivityListPublicEventsForOrg_RequestOptions
  ];
  "GET /users/:username/received_events": [
    ActivityListReceivedEventsForUser_Options,
    ActivityListReceivedEventsForUser_RequestOptions
  ];
  "GET /users/:username/received_events/public": [
    ActivityListReceivedPublicEventsForUser_Options,
    ActivityListReceivedPublicEventsForUser_RequestOptions
  ];
  "GET /users/:username/events": [
    ActivityListEventsForUser_Options,
    ActivityListEventsForUser_RequestOptions
  ];
  "GET /users/:username/events/public": [
    ActivityListPublicEventsForUser_Options,
    ActivityListPublicEventsForUser_RequestOptions
  ];
  "GET /users/:username/events/orgs/:org": [
    ActivityListEventsForOrg_Options,
    ActivityListEventsForOrg_RequestOptions
  ];
  "GET /feeds": [ActivityListFeeds_Options, ActivityListFeeds_RequestOptions];
  "GET /notifications": [
    ActivityListNotifications_Options,
    ActivityListNotifications_RequestOptions
  ];
  "GET /repos/:owner/:repo/notifications": [
    ActivityListNotificationsForRepo_Options,
    ActivityListNotificationsForRepo_RequestOptions
  ];
  "PUT /notifications": [
    ActivityMarkAsRead_Options,
    ActivityMarkAsRead_RequestOptions
  ];
  "PUT /repos/:owner/:repo/notifications": [
    ActivityMarkNotificationsAsReadForRepo_Options,
    ActivityMarkNotificationsAsReadForRepo_RequestOptions
  ];
  "GET /notifications/threads/:thread_id": [
    ActivityGetThread_Options,
    ActivityGetThread_RequestOptions
  ];
  "PATCH /notifications/threads/:thread_id": [
    ActivityMarkThreadAsRead_Options,
    ActivityMarkThreadAsRead_RequestOptions
  ];
  "GET /notifications/threads/:thread_id/subscription": [
    ActivityGetThreadSubscription_Options,
    ActivityGetThreadSubscription_RequestOptions
  ];
  "PUT /notifications/threads/:thread_id/subscription": [
    ActivitySetThreadSubscription_Options,
    ActivitySetThreadSubscription_RequestOptions
  ];
  "DELETE /notifications/threads/:thread_id/subscription": [
    ActivityDeleteThreadSubscription_Options,
    ActivityDeleteThreadSubscription_RequestOptions
  ];
  "GET /repos/:owner/:repo/stargazers": [
    ActivityListStargazersForRepo_Options,
    ActivityListStargazersForRepo_RequestOptions
  ];
  "GET /users/:username/starred": [
    ActivityListReposStarredByUser_Options,
    ActivityListReposStarredByUser_RequestOptions
  ];
  "GET /user/starred": [
    ActivityListReposStarredByAuthenticatedUser_Options,
    ActivityListReposStarredByAuthenticatedUser_RequestOptions
  ];
  "GET /user/starred/:owner/:repo": [
    ActivityCheckStarringRepo_Options,
    ActivityCheckStarringRepo_RequestOptions
  ];
  "PUT /user/starred/:owner/:repo": [
    ActivityStarRepo_Options,
    ActivityStarRepo_RequestOptions
  ];
  "DELETE /user/starred/:owner/:repo": [
    ActivityUnstarRepo_Options,
    ActivityUnstarRepo_RequestOptions
  ];
  "GET /repos/:owner/:repo/subscribers": [
    ActivityListWatchersForRepo_Options,
    ActivityListWatchersForRepo_RequestOptions
  ];
  "GET /users/:username/subscriptions": [
    ActivityListReposWatchedByUser_Options,
    ActivityListReposWatchedByUser_RequestOptions
  ];
  "GET /user/subscriptions": [
    ActivityListWatchedReposForAuthenticatedUser_Options,
    ActivityListWatchedReposForAuthenticatedUser_RequestOptions
  ];
  "GET /repos/:owner/:repo/subscription": [
    ActivityGetRepoSubscription_Options,
    ActivityGetRepoSubscription_RequestOptions
  ];
  "PUT /repos/:owner/:repo/subscription": [
    ActivitySetRepoSubscription_Options,
    ActivitySetRepoSubscription_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/subscription": [
    ActivityDeleteRepoSubscription_Options,
    ActivityDeleteRepoSubscription_RequestOptions
  ];
  "GET /user/subscriptions/:owner/:repo": [
    ActivityCheckWatchingRepoLegacy_Options,
    ActivityCheckWatchingRepoLegacy_RequestOptions
  ];
  "PUT /user/subscriptions/:owner/:repo": [
    ActivityWatchRepoLegacy_Options,
    ActivityWatchRepoLegacy_RequestOptions
  ];
  "DELETE /user/subscriptions/:owner/:repo": [
    ActivityStopWatchingRepoLegacy_Options,
    ActivityStopWatchingRepoLegacy_RequestOptions
  ];
  "GET /apps/:app_slug": [AppsGetBySlug_Options, AppsGetBySlug_RequestOptions];
  "GET /app": [
    AppsGetAuthenticated_Options,
    AppsGetAuthenticated_RequestOptions
  ];
  "GET /app/installations": [
    AppsListInstallations_Options,
    AppsListInstallations_RequestOptions
  ];
  "GET /app/installations/:installation_id": [
    AppsGetInstallation_Options,
    AppsGetInstallation_RequestOptions
  ];
  "DELETE /app/installations/:installation_id": [
    AppsDeleteInstallation_Options,
    AppsDeleteInstallation_RequestOptions
  ];
  "POST /app/installations/:installation_id/access_tokens": [
    AppsCreateInstallationToken_Options,
    AppsCreateInstallationToken_RequestOptions
  ];
  "GET /orgs/:org/installation": [
    AppsGetOrgInstallation_Options | AppsFindOrgInstallation_Options,

      | AppsGetOrgInstallation_RequestOptions
      | AppsFindOrgInstallation_RequestOptions
  ];
  "GET /repos/:owner/:repo/installation": [
    AppsGetRepoInstallation_Options | AppsFindRepoInstallation_Options,

      | AppsGetRepoInstallation_RequestOptions
      | AppsFindRepoInstallation_RequestOptions
  ];
  "GET /users/:username/installation": [
    AppsGetUserInstallation_Options | AppsFindUserInstallation_Options,

      | AppsGetUserInstallation_RequestOptions
      | AppsFindUserInstallation_RequestOptions
  ];
  "POST /app-manifests/:code/conversions": [
    AppsCreateFromManifest_Options,
    AppsCreateFromManifest_RequestOptions
  ];
  "GET /installation/repositories": [
    AppsListRepos_Options,
    AppsListRepos_RequestOptions
  ];
  "GET /user/installations": [
    AppsListInstallationsForAuthenticatedUser_Options,
    AppsListInstallationsForAuthenticatedUser_RequestOptions
  ];
  "GET /user/installations/:installation_id/repositories": [
    AppsListInstallationReposForAuthenticatedUser_Options,
    AppsListInstallationReposForAuthenticatedUser_RequestOptions
  ];
  "PUT /user/installations/:installation_id/repositories/:repository_id": [
    AppsAddRepoToInstallation_Options,
    AppsAddRepoToInstallation_RequestOptions
  ];
  "DELETE /user/installations/:installation_id/repositories/:repository_id": [
    AppsRemoveRepoFromInstallation_Options,
    AppsRemoveRepoFromInstallation_RequestOptions
  ];
  "POST /content_references/:content_reference_id/attachments": [
    AppsCreateContentAttachment_Options,
    AppsCreateContentAttachment_RequestOptions
  ];
  "GET /marketplace_listing/plans": [
    AppsListPlans_Options,
    AppsListPlans_RequestOptions
  ];
  "GET /marketplace_listing/stubbed/plans": [
    AppsListPlansStubbed_Options,
    AppsListPlansStubbed_RequestOptions
  ];
  "GET /marketplace_listing/plans/:plan_id/accounts": [
    AppsListAccountsUserOrOrgOnPlan_Options,
    AppsListAccountsUserOrOrgOnPlan_RequestOptions
  ];
  "GET /marketplace_listing/stubbed/plans/:plan_id/accounts": [
    AppsListAccountsUserOrOrgOnPlanStubbed_Options,
    AppsListAccountsUserOrOrgOnPlanStubbed_RequestOptions
  ];
  "GET /marketplace_listing/accounts/:account_id": [
    AppsCheckAccountIsAssociatedWithAny_Options,
    AppsCheckAccountIsAssociatedWithAny_RequestOptions
  ];
  "GET /marketplace_listing/stubbed/accounts/:account_id": [
    AppsCheckAccountIsAssociatedWithAnyStubbed_Options,
    AppsCheckAccountIsAssociatedWithAnyStubbed_RequestOptions
  ];
  "GET /user/marketplace_purchases": [
    AppsListMarketplacePurchasesForAuthenticatedUser_Options,
    AppsListMarketplacePurchasesForAuthenticatedUser_RequestOptions
  ];
  "GET /user/marketplace_purchases/stubbed": [
    AppsListMarketplacePurchasesForAuthenticatedUserStubbed_Options,
    AppsListMarketplacePurchasesForAuthenticatedUserStubbed_RequestOptions
  ];
  "POST /repos/:owner/:repo/check-runs": [
    ChecksCreate_Options,
    ChecksCreate_RequestOptions
  ];
  "PATCH /repos/:owner/:repo/check-runs/:check_run_id": [
    ChecksUpdate_Options,
    ChecksUpdate_RequestOptions
  ];
  "GET /repos/:owner/:repo/commits/:ref/check-runs": [
    ChecksListForRef_Options,
    ChecksListForRef_RequestOptions
  ];
  "GET /repos/:owner/:repo/check-suites/:check_suite_id/check-runs": [
    ChecksListForSuite_Options,
    ChecksListForSuite_RequestOptions
  ];
  "GET /repos/:owner/:repo/check-runs/:check_run_id": [
    ChecksGet_Options,
    ChecksGet_RequestOptions
  ];
  "GET /repos/:owner/:repo/check-runs/:check_run_id/annotations": [
    ChecksListAnnotations_Options,
    ChecksListAnnotations_RequestOptions
  ];
  "GET /repos/:owner/:repo/check-suites/:check_suite_id": [
    ChecksGetSuite_Options,
    ChecksGetSuite_RequestOptions
  ];
  "GET /repos/:owner/:repo/commits/:ref/check-suites": [
    ChecksListSuitesForRef_Options,
    ChecksListSuitesForRef_RequestOptions
  ];
  "PATCH /repos/:owner/:repo/check-suites/preferences": [
    ChecksSetSuitesPreferences_Options,
    ChecksSetSuitesPreferences_RequestOptions
  ];
  "POST /repos/:owner/:repo/check-suites": [
    ChecksCreateSuite_Options,
    ChecksCreateSuite_RequestOptions
  ];
  "POST /repos/:owner/:repo/check-suites/:check_suite_id/rerequest": [
    ChecksRerequestSuite_Options,
    ChecksRerequestSuite_RequestOptions
  ];
  "GET /codes_of_conduct": [
    CodesOfConductListConductCodes_Options,
    CodesOfConductListConductCodes_RequestOptions
  ];
  "GET /codes_of_conduct/:key": [
    CodesOfConductGetConductCode_Options,
    CodesOfConductGetConductCode_RequestOptions
  ];
  "GET /repos/:owner/:repo/community/code_of_conduct": [
    CodesOfConductGetForRepo_Options,
    CodesOfConductGetForRepo_RequestOptions
  ];
  "GET /emojis": [EmojisGet_Options, EmojisGet_RequestOptions];
  "GET /users/:username/gists": [
    GistsListPublicForUser_Options,
    GistsListPublicForUser_RequestOptions
  ];
  "GET /gists": [GistsList_Options, GistsList_RequestOptions];
  "GET /gists/public": [
    GistsListPublic_Options,
    GistsListPublic_RequestOptions
  ];
  "GET /gists/starred": [
    GistsListStarred_Options,
    GistsListStarred_RequestOptions
  ];
  "GET /gists/:gist_id": [GistsGet_Options, GistsGet_RequestOptions];
  "GET /gists/:gist_id/:sha": [
    GistsGetRevision_Options,
    GistsGetRevision_RequestOptions
  ];
  "POST /gists": [GistsCreate_Options, GistsCreate_RequestOptions];
  "PATCH /gists/:gist_id": [GistsUpdate_Options, GistsUpdate_RequestOptions];
  "GET /gists/:gist_id/commits": [
    GistsListCommits_Options,
    GistsListCommits_RequestOptions
  ];
  "PUT /gists/:gist_id/star": [GistsStar_Options, GistsStar_RequestOptions];
  "DELETE /gists/:gist_id/star": [
    GistsUnstar_Options,
    GistsUnstar_RequestOptions
  ];
  "GET /gists/:gist_id/star": [
    GistsCheckIsStarred_Options,
    GistsCheckIsStarred_RequestOptions
  ];
  "POST /gists/:gist_id/forks": [GistsFork_Options, GistsFork_RequestOptions];
  "GET /gists/:gist_id/forks": [
    GistsListForks_Options,
    GistsListForks_RequestOptions
  ];
  "DELETE /gists/:gist_id": [GistsDelete_Options, GistsDelete_RequestOptions];
  "GET /gists/:gist_id/comments": [
    GistsListComments_Options,
    GistsListComments_RequestOptions
  ];
  "GET /gists/:gist_id/comments/:comment_id": [
    GistsGetComment_Options,
    GistsGetComment_RequestOptions
  ];
  "POST /gists/:gist_id/comments": [
    GistsCreateComment_Options,
    GistsCreateComment_RequestOptions
  ];
  "PATCH /gists/:gist_id/comments/:comment_id": [
    GistsUpdateComment_Options,
    GistsUpdateComment_RequestOptions
  ];
  "DELETE /gists/:gist_id/comments/:comment_id": [
    GistsDeleteComment_Options,
    GistsDeleteComment_RequestOptions
  ];
  "GET /repos/:owner/:repo/git/blobs/:file_sha": [
    GitGetBlob_Options,
    GitGetBlob_RequestOptions
  ];
  "POST /repos/:owner/:repo/git/blobs": [
    GitCreateBlob_Options,
    GitCreateBlob_RequestOptions
  ];
  "GET /repos/:owner/:repo/git/commits/:commit_sha": [
    GitGetCommit_Options,
    GitGetCommit_RequestOptions
  ];
  "POST /repos/:owner/:repo/git/commits": [
    GitCreateCommit_Options,
    GitCreateCommit_RequestOptions
  ];
  "GET /repos/:owner/:repo/git/refs/:ref": [
    GitGetRef_Options,
    GitGetRef_RequestOptions
  ];
  "GET /repos/:owner/:repo/git/refs/:namespace": [
    GitListRefs_Options,
    GitListRefs_RequestOptions
  ];
  "POST /repos/:owner/:repo/git/refs": [
    GitCreateRef_Options,
    GitCreateRef_RequestOptions
  ];
  "PATCH /repos/:owner/:repo/git/refs/:ref": [
    GitUpdateRef_Options,
    GitUpdateRef_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/git/refs/:ref": [
    GitDeleteRef_Options,
    GitDeleteRef_RequestOptions
  ];
  "GET /repos/:owner/:repo/git/tags/:tag_sha": [
    GitGetTag_Options,
    GitGetTag_RequestOptions
  ];
  "POST /repos/:owner/:repo/git/tags": [
    GitCreateTag_Options,
    GitCreateTag_RequestOptions
  ];
  "GET /repos/:owner/:repo/git/trees/:tree_sha": [
    GitGetTree_Options,
    GitGetTree_RequestOptions
  ];
  "POST /repos/:owner/:repo/git/trees": [
    GitCreateTree_Options,
    GitCreateTree_RequestOptions
  ];
  "GET /gitignore/templates": [
    GitignoreListTemplates_Options,
    GitignoreListTemplates_RequestOptions
  ];
  "GET /gitignore/templates/:name": [
    GitignoreGetTemplate_Options,
    GitignoreGetTemplate_RequestOptions
  ];
  "GET /orgs/:org/interaction-limits": [
    InteractionsGetRestrictionsForOrg_Options,
    InteractionsGetRestrictionsForOrg_RequestOptions
  ];
  "PUT /orgs/:org/interaction-limits": [
    InteractionsAddOrUpdateRestrictionsForOrg_Options,
    InteractionsAddOrUpdateRestrictionsForOrg_RequestOptions
  ];
  "DELETE /orgs/:org/interaction-limits": [
    InteractionsRemoveRestrictionsForOrg_Options,
    InteractionsRemoveRestrictionsForOrg_RequestOptions
  ];
  "GET /repos/:owner/:repo/interaction-limits": [
    InteractionsGetRestrictionsForRepo_Options,
    InteractionsGetRestrictionsForRepo_RequestOptions
  ];
  "PUT /repos/:owner/:repo/interaction-limits": [
    InteractionsAddOrUpdateRestrictionsForRepo_Options,
    InteractionsAddOrUpdateRestrictionsForRepo_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/interaction-limits": [
    InteractionsRemoveRestrictionsForRepo_Options,
    InteractionsRemoveRestrictionsForRepo_RequestOptions
  ];
  "GET /issues": [IssuesList_Options, IssuesList_RequestOptions];
  "GET /user/issues": [
    IssuesListForAuthenticatedUser_Options,
    IssuesListForAuthenticatedUser_RequestOptions
  ];
  "GET /orgs/:org/issues": [
    IssuesListForOrg_Options,
    IssuesListForOrg_RequestOptions
  ];
  "GET /repos/:owner/:repo/issues": [
    IssuesListForRepo_Options,
    IssuesListForRepo_RequestOptions
  ];
  "GET /repos/:owner/:repo/issues/:issue_number": [
    IssuesGet_Options,
    IssuesGet_RequestOptions
  ];
  "POST /repos/:owner/:repo/issues": [
    IssuesCreate_Options,
    IssuesCreate_RequestOptions
  ];
  "PATCH /repos/:owner/:repo/issues/:issue_number": [
    IssuesUpdate_Options,
    IssuesUpdate_RequestOptions
  ];
  "PUT /repos/:owner/:repo/issues/:issue_number/lock": [
    IssuesLock_Options,
    IssuesLock_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/issues/:issue_number/lock": [
    IssuesUnlock_Options,
    IssuesUnlock_RequestOptions
  ];
  "GET /repos/:owner/:repo/assignees": [
    IssuesListAssignees_Options,
    IssuesListAssignees_RequestOptions
  ];
  "GET /repos/:owner/:repo/assignees/:assignee": [
    IssuesCheckAssignee_Options,
    IssuesCheckAssignee_RequestOptions
  ];
  "POST /repos/:owner/:repo/issues/:issue_number/assignees": [
    IssuesAddAssignees_Options,
    IssuesAddAssignees_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/issues/:issue_number/assignees": [
    IssuesRemoveAssignees_Options,
    IssuesRemoveAssignees_RequestOptions
  ];
  "GET /repos/:owner/:repo/issues/:issue_number/comments": [
    IssuesListComments_Options,
    IssuesListComments_RequestOptions
  ];
  "GET /repos/:owner/:repo/issues/comments": [
    IssuesListCommentsForRepo_Options,
    IssuesListCommentsForRepo_RequestOptions
  ];
  "GET /repos/:owner/:repo/issues/comments/:comment_id": [
    IssuesGetComment_Options,
    IssuesGetComment_RequestOptions
  ];
  "POST /repos/:owner/:repo/issues/:issue_number/comments": [
    IssuesCreateComment_Options,
    IssuesCreateComment_RequestOptions
  ];
  "PATCH /repos/:owner/:repo/issues/comments/:comment_id": [
    IssuesUpdateComment_Options,
    IssuesUpdateComment_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/issues/comments/:comment_id": [
    IssuesDeleteComment_Options,
    IssuesDeleteComment_RequestOptions
  ];
  "GET /repos/:owner/:repo/issues/:issue_number/events": [
    IssuesListEvents_Options,
    IssuesListEvents_RequestOptions
  ];
  "GET /repos/:owner/:repo/issues/events": [
    IssuesListEventsForRepo_Options,
    IssuesListEventsForRepo_RequestOptions
  ];
  "GET /repos/:owner/:repo/issues/events/:event_id": [
    IssuesGetEvent_Options,
    IssuesGetEvent_RequestOptions
  ];
  "GET /repos/:owner/:repo/labels": [
    IssuesListLabelsForRepo_Options,
    IssuesListLabelsForRepo_RequestOptions
  ];
  "GET /repos/:owner/:repo/labels/:name": [
    IssuesGetLabel_Options,
    IssuesGetLabel_RequestOptions
  ];
  "POST /repos/:owner/:repo/labels": [
    IssuesCreateLabel_Options,
    IssuesCreateLabel_RequestOptions
  ];
  "PATCH /repos/:owner/:repo/labels/:current_name": [
    IssuesUpdateLabel_Options,
    IssuesUpdateLabel_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/labels/:name": [
    IssuesDeleteLabel_Options,
    IssuesDeleteLabel_RequestOptions
  ];
  "GET /repos/:owner/:repo/issues/:issue_number/labels": [
    IssuesListLabelsOnIssue_Options,
    IssuesListLabelsOnIssue_RequestOptions
  ];
  "POST /repos/:owner/:repo/issues/:issue_number/labels": [
    IssuesAddLabels_Options,
    IssuesAddLabels_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/issues/:issue_number/labels/:name": [
    IssuesRemoveLabel_Options,
    IssuesRemoveLabel_RequestOptions
  ];
  "PUT /repos/:owner/:repo/issues/:issue_number/labels": [
    IssuesReplaceLabels_Options,
    IssuesReplaceLabels_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/issues/:issue_number/labels": [
    IssuesRemoveLabels_Options,
    IssuesRemoveLabels_RequestOptions
  ];
  "GET /repos/:owner/:repo/milestones/:milestone_number/labels": [
    IssuesListLabelsForMilestone_Options,
    IssuesListLabelsForMilestone_RequestOptions
  ];
  "GET /repos/:owner/:repo/milestones": [
    IssuesListMilestonesForRepo_Options,
    IssuesListMilestonesForRepo_RequestOptions
  ];
  "GET /repos/:owner/:repo/milestones/:milestone_number": [
    IssuesGetMilestone_Options,
    IssuesGetMilestone_RequestOptions
  ];
  "POST /repos/:owner/:repo/milestones": [
    IssuesCreateMilestone_Options,
    IssuesCreateMilestone_RequestOptions
  ];
  "PATCH /repos/:owner/:repo/milestones/:milestone_number": [
    IssuesUpdateMilestone_Options,
    IssuesUpdateMilestone_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/milestones/:milestone_number": [
    IssuesDeleteMilestone_Options,
    IssuesDeleteMilestone_RequestOptions
  ];
  "GET /repos/:owner/:repo/issues/:issue_number/timeline": [
    IssuesListEventsForTimeline_Options,
    IssuesListEventsForTimeline_RequestOptions
  ];
  "GET /licenses": [
    LicensesListCommonlyUsed_Options | LicensesList_Options,
    LicensesListCommonlyUsed_RequestOptions | LicensesList_RequestOptions
  ];
  "GET /licenses/:license": [LicensesGet_Options, LicensesGet_RequestOptions];
  "GET /repos/:owner/:repo/license": [
    LicensesGetForRepo_Options,
    LicensesGetForRepo_RequestOptions
  ];
  "POST /markdown": [MarkdownRender_Options, MarkdownRender_RequestOptions];
  "POST /markdown/raw": [
    MarkdownRenderRaw_Options,
    MarkdownRenderRaw_RequestOptions
  ];
  "GET /meta": [MetaGet_Options, MetaGet_RequestOptions];
  "POST /orgs/:org/migrations": [
    MigrationsStartForOrg_Options,
    MigrationsStartForOrg_RequestOptions
  ];
  "GET /orgs/:org/migrations": [
    MigrationsListForOrg_Options,
    MigrationsListForOrg_RequestOptions
  ];
  "GET /orgs/:org/migrations/:migration_id": [
    MigrationsGetStatusForOrg_Options,
    MigrationsGetStatusForOrg_RequestOptions
  ];
  "GET /orgs/:org/migrations/:migration_id/archive": [
    MigrationsGetArchiveForOrg_Options,
    MigrationsGetArchiveForOrg_RequestOptions
  ];
  "DELETE /orgs/:org/migrations/:migration_id/archive": [
    MigrationsDeleteArchiveForOrg_Options,
    MigrationsDeleteArchiveForOrg_RequestOptions
  ];
  "DELETE /orgs/:org/migrations/:migration_id/repos/:repo_name/lock": [
    MigrationsUnlockRepoForOrg_Options,
    MigrationsUnlockRepoForOrg_RequestOptions
  ];
  "PUT /repos/:owner/:repo/import": [
    MigrationsStartImport_Options,
    MigrationsStartImport_RequestOptions
  ];
  "GET /repos/:owner/:repo/import": [
    MigrationsGetImportProgress_Options,
    MigrationsGetImportProgress_RequestOptions
  ];
  "PATCH /repos/:owner/:repo/import": [
    MigrationsUpdateImport_Options,
    MigrationsUpdateImport_RequestOptions
  ];
  "GET /repos/:owner/:repo/import/authors": [
    MigrationsGetCommitAuthors_Options,
    MigrationsGetCommitAuthors_RequestOptions
  ];
  "PATCH /repos/:owner/:repo/import/authors/:author_id": [
    MigrationsMapCommitAuthor_Options,
    MigrationsMapCommitAuthor_RequestOptions
  ];
  "PATCH /repos/:owner/:repo/import/lfs": [
    MigrationsSetLfsPreference_Options,
    MigrationsSetLfsPreference_RequestOptions
  ];
  "GET /repos/:owner/:repo/import/large_files": [
    MigrationsGetLargeFiles_Options,
    MigrationsGetLargeFiles_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/import": [
    MigrationsCancelImport_Options,
    MigrationsCancelImport_RequestOptions
  ];
  "POST /user/migrations": [
    MigrationsStartForAuthenticatedUser_Options,
    MigrationsStartForAuthenticatedUser_RequestOptions
  ];
  "GET /user/migrations": [
    MigrationsListForAuthenticatedUser_Options,
    MigrationsListForAuthenticatedUser_RequestOptions
  ];
  "GET /user/migrations/:migration_id": [
    MigrationsGetStatusForAuthenticatedUser_Options,
    MigrationsGetStatusForAuthenticatedUser_RequestOptions
  ];
  "GET /user/migrations/:migration_id/archive": [
    MigrationsGetArchiveForAuthenticatedUser_Options,
    MigrationsGetArchiveForAuthenticatedUser_RequestOptions
  ];
  "DELETE /user/migrations/:migration_id/archive": [
    MigrationsDeleteArchiveForAuthenticatedUser_Options,
    MigrationsDeleteArchiveForAuthenticatedUser_RequestOptions
  ];
  "DELETE /user/migrations/:migration_id/repos/:repo_name/lock": [
    MigrationsUnlockRepoForAuthenticatedUser_Options,
    MigrationsUnlockRepoForAuthenticatedUser_RequestOptions
  ];
  "GET /applications/grants": [
    OauthAuthorizationsListGrants_Options,
    OauthAuthorizationsListGrants_RequestOptions
  ];
  "GET /applications/grants/:grant_id": [
    OauthAuthorizationsGetGrant_Options,
    OauthAuthorizationsGetGrant_RequestOptions
  ];
  "DELETE /applications/grants/:grant_id": [
    OauthAuthorizationsDeleteGrant_Options,
    OauthAuthorizationsDeleteGrant_RequestOptions
  ];
  "GET /authorizations": [
    OauthAuthorizationsListAuthorizations_Options,
    OauthAuthorizationsListAuthorizations_RequestOptions
  ];
  "GET /authorizations/:authorization_id": [
    OauthAuthorizationsGetAuthorization_Options,
    OauthAuthorizationsGetAuthorization_RequestOptions
  ];
  "POST /authorizations": [
    OauthAuthorizationsCreateAuthorization_Options,
    OauthAuthorizationsCreateAuthorization_RequestOptions
  ];
  "PUT /authorizations/clients/:client_id": [
    OauthAuthorizationsGetOrCreateAuthorizationForApp_Options,
    OauthAuthorizationsGetOrCreateAuthorizationForApp_RequestOptions
  ];
  "PUT /authorizations/clients/:client_id/:fingerprint": [

      | OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint_Options
      | OauthAuthorizationsGetOrCreateAuthorizationForAppFingerprint_Options,

      | OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint_RequestOptions
      | OauthAuthorizationsGetOrCreateAuthorizationForAppFingerprint_RequestOptions
  ];
  "PATCH /authorizations/:authorization_id": [
    OauthAuthorizationsUpdateAuthorization_Options,
    OauthAuthorizationsUpdateAuthorization_RequestOptions
  ];
  "DELETE /authorizations/:authorization_id": [
    OauthAuthorizationsDeleteAuthorization_Options,
    OauthAuthorizationsDeleteAuthorization_RequestOptions
  ];
  "GET /applications/:client_id/tokens/:access_token": [
    OauthAuthorizationsCheckAuthorization_Options,
    OauthAuthorizationsCheckAuthorization_RequestOptions
  ];
  "POST /applications/:client_id/tokens/:access_token": [
    OauthAuthorizationsResetAuthorization_Options,
    OauthAuthorizationsResetAuthorization_RequestOptions
  ];
  "DELETE /applications/:client_id/tokens/:access_token": [
    OauthAuthorizationsRevokeAuthorizationForApplication_Options,
    OauthAuthorizationsRevokeAuthorizationForApplication_RequestOptions
  ];
  "DELETE /applications/:client_id/grants/:access_token": [
    OauthAuthorizationsRevokeGrantForApplication_Options,
    OauthAuthorizationsRevokeGrantForApplication_RequestOptions
  ];
  "GET /user/orgs": [
    OrgsListForAuthenticatedUser_Options,
    OrgsListForAuthenticatedUser_RequestOptions
  ];
  "GET /organizations": [OrgsList_Options, OrgsList_RequestOptions];
  "GET /users/:username/orgs": [
    OrgsListForUser_Options,
    OrgsListForUser_RequestOptions
  ];
  "GET /orgs/:org": [OrgsGet_Options, OrgsGet_RequestOptions];
  "PATCH /orgs/:org": [OrgsUpdate_Options, OrgsUpdate_RequestOptions];
  "GET /orgs/:org/credential-authorizations": [
    OrgsListCredentialAuthorizations_Options,
    OrgsListCredentialAuthorizations_RequestOptions
  ];
  "DELETE /orgs/:org/credential-authorizations/:credential_id": [
    OrgsRemoveCredentialAuthorization_Options,
    OrgsRemoveCredentialAuthorization_RequestOptions
  ];
  "GET /orgs/:org/blocks": [
    OrgsListBlockedUsers_Options,
    OrgsListBlockedUsers_RequestOptions
  ];
  "GET /orgs/:org/blocks/:username": [
    OrgsCheckBlockedUser_Options,
    OrgsCheckBlockedUser_RequestOptions
  ];
  "PUT /orgs/:org/blocks/:username": [
    OrgsBlockUser_Options,
    OrgsBlockUser_RequestOptions
  ];
  "DELETE /orgs/:org/blocks/:username": [
    OrgsUnblockUser_Options,
    OrgsUnblockUser_RequestOptions
  ];
  "GET /orgs/:org/hooks": [OrgsListHooks_Options, OrgsListHooks_RequestOptions];
  "GET /orgs/:org/hooks/:hook_id": [
    OrgsGetHook_Options,
    OrgsGetHook_RequestOptions
  ];
  "POST /orgs/:org/hooks": [
    OrgsCreateHook_Options,
    OrgsCreateHook_RequestOptions
  ];
  "PATCH /orgs/:org/hooks/:hook_id": [
    OrgsUpdateHook_Options,
    OrgsUpdateHook_RequestOptions
  ];
  "POST /orgs/:org/hooks/:hook_id/pings": [
    OrgsPingHook_Options,
    OrgsPingHook_RequestOptions
  ];
  "DELETE /orgs/:org/hooks/:hook_id": [
    OrgsDeleteHook_Options,
    OrgsDeleteHook_RequestOptions
  ];
  "GET /orgs/:org/members": [
    OrgsListMembers_Options,
    OrgsListMembers_RequestOptions
  ];
  "GET /orgs/:org/members/:username": [
    OrgsCheckMembership_Options,
    OrgsCheckMembership_RequestOptions
  ];
  "DELETE /orgs/:org/members/:username": [
    OrgsRemoveMember_Options,
    OrgsRemoveMember_RequestOptions
  ];
  "GET /orgs/:org/public_members": [
    OrgsListPublicMembers_Options,
    OrgsListPublicMembers_RequestOptions
  ];
  "GET /orgs/:org/public_members/:username": [
    OrgsCheckPublicMembership_Options,
    OrgsCheckPublicMembership_RequestOptions
  ];
  "PUT /orgs/:org/public_members/:username": [
    OrgsPublicizeMembership_Options,
    OrgsPublicizeMembership_RequestOptions
  ];
  "DELETE /orgs/:org/public_members/:username": [
    OrgsConcealMembership_Options,
    OrgsConcealMembership_RequestOptions
  ];
  "GET /orgs/:org/memberships/:username": [
    OrgsGetMembership_Options,
    OrgsGetMembership_RequestOptions
  ];
  "PUT /orgs/:org/memberships/:username": [
    OrgsAddOrUpdateMembership_Options,
    OrgsAddOrUpdateMembership_RequestOptions
  ];
  "DELETE /orgs/:org/memberships/:username": [
    OrgsRemoveMembership_Options,
    OrgsRemoveMembership_RequestOptions
  ];
  "GET /orgs/:org/invitations/:invitation_id/teams": [
    OrgsListInvitationTeams_Options,
    OrgsListInvitationTeams_RequestOptions
  ];
  "GET /orgs/:org/invitations": [
    OrgsListPendingInvitations_Options,
    OrgsListPendingInvitations_RequestOptions
  ];
  "POST /orgs/:org/invitations": [
    OrgsCreateInvitation_Options,
    OrgsCreateInvitation_RequestOptions
  ];
  "GET /user/memberships/orgs": [
    OrgsListMemberships_Options,
    OrgsListMemberships_RequestOptions
  ];
  "GET /user/memberships/orgs/:org": [
    OrgsGetMembershipForAuthenticatedUser_Options,
    OrgsGetMembershipForAuthenticatedUser_RequestOptions
  ];
  "PATCH /user/memberships/orgs/:org": [
    OrgsUpdateMembership_Options,
    OrgsUpdateMembership_RequestOptions
  ];
  "GET /orgs/:org/outside_collaborators": [
    OrgsListOutsideCollaborators_Options,
    OrgsListOutsideCollaborators_RequestOptions
  ];
  "DELETE /orgs/:org/outside_collaborators/:username": [
    OrgsRemoveOutsideCollaborator_Options,
    OrgsRemoveOutsideCollaborator_RequestOptions
  ];
  "PUT /orgs/:org/outside_collaborators/:username": [
    OrgsConvertMemberToOutsideCollaborator_Options,
    OrgsConvertMemberToOutsideCollaborator_RequestOptions
  ];
  "GET /repos/:owner/:repo/projects": [
    ProjectsListForRepo_Options,
    ProjectsListForRepo_RequestOptions
  ];
  "GET /orgs/:org/projects": [
    ProjectsListForOrg_Options,
    ProjectsListForOrg_RequestOptions
  ];
  "GET /users/:username/projects": [
    ProjectsListForUser_Options,
    ProjectsListForUser_RequestOptions
  ];
  "GET /projects/:project_id": [
    ProjectsGet_Options,
    ProjectsGet_RequestOptions
  ];
  "POST /repos/:owner/:repo/projects": [
    ProjectsCreateForRepo_Options,
    ProjectsCreateForRepo_RequestOptions
  ];
  "POST /orgs/:org/projects": [
    ProjectsCreateForOrg_Options,
    ProjectsCreateForOrg_RequestOptions
  ];
  "POST /user/projects": [
    ProjectsCreateForAuthenticatedUser_Options,
    ProjectsCreateForAuthenticatedUser_RequestOptions
  ];
  "PATCH /projects/:project_id": [
    ProjectsUpdate_Options,
    ProjectsUpdate_RequestOptions
  ];
  "DELETE /projects/:project_id": [
    ProjectsDelete_Options,
    ProjectsDelete_RequestOptions
  ];
  "GET /projects/columns/:column_id/cards": [
    ProjectsListCards_Options,
    ProjectsListCards_RequestOptions
  ];
  "GET /projects/columns/cards/:card_id": [
    ProjectsGetCard_Options,
    ProjectsGetCard_RequestOptions
  ];
  "POST /projects/columns/:column_id/cards": [
    ProjectsCreateCard_Options,
    ProjectsCreateCard_RequestOptions
  ];
  "PATCH /projects/columns/cards/:card_id": [
    ProjectsUpdateCard_Options,
    ProjectsUpdateCard_RequestOptions
  ];
  "DELETE /projects/columns/cards/:card_id": [
    ProjectsDeleteCard_Options,
    ProjectsDeleteCard_RequestOptions
  ];
  "POST /projects/columns/cards/:card_id/moves": [
    ProjectsMoveCard_Options,
    ProjectsMoveCard_RequestOptions
  ];
  "GET /projects/:project_id/collaborators": [
    ProjectsListCollaborators_Options,
    ProjectsListCollaborators_RequestOptions
  ];
  "GET /projects/:project_id/collaborators/:username/permission": [
    ProjectsReviewUserPermissionLevel_Options,
    ProjectsReviewUserPermissionLevel_RequestOptions
  ];
  "PUT /projects/:project_id/collaborators/:username": [
    ProjectsAddCollaborator_Options,
    ProjectsAddCollaborator_RequestOptions
  ];
  "DELETE /projects/:project_id/collaborators/:username": [
    ProjectsRemoveCollaborator_Options,
    ProjectsRemoveCollaborator_RequestOptions
  ];
  "GET /projects/:project_id/columns": [
    ProjectsListColumns_Options,
    ProjectsListColumns_RequestOptions
  ];
  "GET /projects/columns/:column_id": [
    ProjectsGetColumn_Options,
    ProjectsGetColumn_RequestOptions
  ];
  "POST /projects/:project_id/columns": [
    ProjectsCreateColumn_Options,
    ProjectsCreateColumn_RequestOptions
  ];
  "PATCH /projects/columns/:column_id": [
    ProjectsUpdateColumn_Options,
    ProjectsUpdateColumn_RequestOptions
  ];
  "DELETE /projects/columns/:column_id": [
    ProjectsDeleteColumn_Options,
    ProjectsDeleteColumn_RequestOptions
  ];
  "POST /projects/columns/:column_id/moves": [
    ProjectsMoveColumn_Options,
    ProjectsMoveColumn_RequestOptions
  ];
  "GET /repos/:owner/:repo/pulls": [
    PullsList_Options,
    PullsList_RequestOptions
  ];
  "GET /repos/:owner/:repo/pulls/:pull_number": [
    PullsGet_Options,
    PullsGet_RequestOptions
  ];
  "POST /repos/:owner/:repo/pulls": [
    PullsCreate_Options | PullsCreateFromIssue_Options,
    PullsCreate_RequestOptions | PullsCreateFromIssue_RequestOptions
  ];
  "PATCH /repos/:owner/:repo/pulls/:pull_number": [
    PullsUpdate_Options,
    PullsUpdate_RequestOptions
  ];
  "GET /repos/:owner/:repo/pulls/:pull_number/commits": [
    PullsListCommits_Options,
    PullsListCommits_RequestOptions
  ];
  "GET /repos/:owner/:repo/pulls/:pull_number/files": [
    PullsListFiles_Options,
    PullsListFiles_RequestOptions
  ];
  "GET /repos/:owner/:repo/pulls/:pull_number/merge": [
    PullsCheckIfMerged_Options,
    PullsCheckIfMerged_RequestOptions
  ];
  "PUT /repos/:owner/:repo/pulls/:pull_number/merge": [
    PullsMerge_Options,
    PullsMerge_RequestOptions
  ];
  "GET /repos/:owner/:repo/pulls/:pull_number/comments": [
    PullsListComments_Options,
    PullsListComments_RequestOptions
  ];
  "GET /repos/:owner/:repo/pulls/comments": [
    PullsListCommentsForRepo_Options,
    PullsListCommentsForRepo_RequestOptions
  ];
  "GET /repos/:owner/:repo/pulls/comments/:comment_id": [
    PullsGetComment_Options,
    PullsGetComment_RequestOptions
  ];
  "POST /repos/:owner/:repo/pulls/:pull_number/comments": [
    PullsCreateComment_Options | PullsCreateCommentReply_Options,
    PullsCreateComment_RequestOptions | PullsCreateCommentReply_RequestOptions
  ];
  "PATCH /repos/:owner/:repo/pulls/comments/:comment_id": [
    PullsUpdateComment_Options,
    PullsUpdateComment_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/pulls/comments/:comment_id": [
    PullsDeleteComment_Options,
    PullsDeleteComment_RequestOptions
  ];
  "GET /repos/:owner/:repo/pulls/:pull_number/requested_reviewers": [
    PullsListReviewRequests_Options,
    PullsListReviewRequests_RequestOptions
  ];
  "POST /repos/:owner/:repo/pulls/:pull_number/requested_reviewers": [
    PullsCreateReviewRequest_Options,
    PullsCreateReviewRequest_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/pulls/:pull_number/requested_reviewers": [
    PullsDeleteReviewRequest_Options,
    PullsDeleteReviewRequest_RequestOptions
  ];
  "GET /repos/:owner/:repo/pulls/:pull_number/reviews": [
    PullsListReviews_Options,
    PullsListReviews_RequestOptions
  ];
  "GET /repos/:owner/:repo/pulls/:pull_number/reviews/:review_id": [
    PullsGetReview_Options,
    PullsGetReview_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/pulls/:pull_number/reviews/:review_id": [
    PullsDeletePendingReview_Options,
    PullsDeletePendingReview_RequestOptions
  ];
  "GET /repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/comments": [
    PullsGetCommentsForReview_Options,
    PullsGetCommentsForReview_RequestOptions
  ];
  "POST /repos/:owner/:repo/pulls/:pull_number/reviews": [
    PullsCreateReview_Options,
    PullsCreateReview_RequestOptions
  ];
  "PUT /repos/:owner/:repo/pulls/:pull_number/reviews/:review_id": [
    PullsUpdateReview_Options,
    PullsUpdateReview_RequestOptions
  ];
  "POST /repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/events": [
    PullsSubmitReview_Options,
    PullsSubmitReview_RequestOptions
  ];
  "PUT /repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/dismissals": [
    PullsDismissReview_Options,
    PullsDismissReview_RequestOptions
  ];
  "GET /rate_limit": [RateLimitGet_Options, RateLimitGet_RequestOptions];
  "GET /repos/:owner/:repo/comments/:comment_id/reactions": [
    ReactionsListForCommitComment_Options,
    ReactionsListForCommitComment_RequestOptions
  ];
  "POST /repos/:owner/:repo/comments/:comment_id/reactions": [
    ReactionsCreateForCommitComment_Options,
    ReactionsCreateForCommitComment_RequestOptions
  ];
  "GET /repos/:owner/:repo/issues/:issue_number/reactions": [
    ReactionsListForIssue_Options,
    ReactionsListForIssue_RequestOptions
  ];
  "POST /repos/:owner/:repo/issues/:issue_number/reactions": [
    ReactionsCreateForIssue_Options,
    ReactionsCreateForIssue_RequestOptions
  ];
  "GET /repos/:owner/:repo/issues/comments/:comment_id/reactions": [
    ReactionsListForIssueComment_Options,
    ReactionsListForIssueComment_RequestOptions
  ];
  "POST /repos/:owner/:repo/issues/comments/:comment_id/reactions": [
    ReactionsCreateForIssueComment_Options,
    ReactionsCreateForIssueComment_RequestOptions
  ];
  "GET /repos/:owner/:repo/pulls/comments/:comment_id/reactions": [
    ReactionsListForPullRequestReviewComment_Options,
    ReactionsListForPullRequestReviewComment_RequestOptions
  ];
  "POST /repos/:owner/:repo/pulls/comments/:comment_id/reactions": [
    ReactionsCreateForPullRequestReviewComment_Options,
    ReactionsCreateForPullRequestReviewComment_RequestOptions
  ];
  "GET /teams/:team_id/discussions/:discussion_number/reactions": [
    ReactionsListForTeamDiscussion_Options,
    ReactionsListForTeamDiscussion_RequestOptions
  ];
  "POST /teams/:team_id/discussions/:discussion_number/reactions": [
    ReactionsCreateForTeamDiscussion_Options,
    ReactionsCreateForTeamDiscussion_RequestOptions
  ];
  "GET /teams/:team_id/discussions/:discussion_number/comments/:comment_number/reactions": [
    ReactionsListForTeamDiscussionComment_Options,
    ReactionsListForTeamDiscussionComment_RequestOptions
  ];
  "POST /teams/:team_id/discussions/:discussion_number/comments/:comment_number/reactions": [
    ReactionsCreateForTeamDiscussionComment_Options,
    ReactionsCreateForTeamDiscussionComment_RequestOptions
  ];
  "DELETE /reactions/:reaction_id": [
    ReactionsDelete_Options,
    ReactionsDelete_RequestOptions
  ];
  "GET /user/repos": [ReposList_Options, ReposList_RequestOptions];
  "GET /users/:username/repos": [
    ReposListForUser_Options,
    ReposListForUser_RequestOptions
  ];
  "GET /orgs/:org/repos": [
    ReposListForOrg_Options,
    ReposListForOrg_RequestOptions
  ];
  "GET /repositories": [
    ReposListPublic_Options,
    ReposListPublic_RequestOptions
  ];
  "POST /user/repos": [
    ReposCreateForAuthenticatedUser_Options,
    ReposCreateForAuthenticatedUser_RequestOptions
  ];
  "POST /orgs/:org/repos": [
    ReposCreateInOrg_Options,
    ReposCreateInOrg_RequestOptions
  ];
  "GET /repos/:owner/:repo": [ReposGet_Options, ReposGet_RequestOptions];
  "PATCH /repos/:owner/:repo": [
    ReposUpdate_Options,
    ReposUpdate_RequestOptions
  ];
  "GET /repos/:owner/:repo/topics": [
    ReposListTopics_Options,
    ReposListTopics_RequestOptions
  ];
  "PUT /repos/:owner/:repo/topics": [
    ReposReplaceTopics_Options,
    ReposReplaceTopics_RequestOptions
  ];
  "PUT /repos/:owner/:repo/vulnerability-alerts": [
    ReposEnableVulnerabilityAlerts_Options,
    ReposEnableVulnerabilityAlerts_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/vulnerability-alerts": [
    ReposDisableVulnerabilityAlerts_Options,
    ReposDisableVulnerabilityAlerts_RequestOptions
  ];
  "GET /repos/:owner/:repo/contributors": [
    ReposListContributors_Options,
    ReposListContributors_RequestOptions
  ];
  "GET /repos/:owner/:repo/languages": [
    ReposListLanguages_Options,
    ReposListLanguages_RequestOptions
  ];
  "GET /repos/:owner/:repo/teams": [
    ReposListTeams_Options,
    ReposListTeams_RequestOptions
  ];
  "GET /repos/:owner/:repo/tags": [
    ReposListTags_Options,
    ReposListTags_RequestOptions
  ];
  "DELETE /repos/:owner/:repo": [
    ReposDelete_Options,
    ReposDelete_RequestOptions
  ];
  "POST /repos/:owner/:repo/transfer": [
    ReposTransfer_Options,
    ReposTransfer_RequestOptions
  ];
  "GET /repos/:owner/:repo/branches": [
    ReposListBranches_Options,
    ReposListBranches_RequestOptions
  ];
  "GET /repos/:owner/:repo/branches/:branch": [
    ReposGetBranch_Options,
    ReposGetBranch_RequestOptions
  ];
  "GET /repos/:owner/:repo/branches/:branch/protection": [
    ReposGetBranchProtection_Options,
    ReposGetBranchProtection_RequestOptions
  ];
  "PUT /repos/:owner/:repo/branches/:branch/protection": [
    ReposUpdateBranchProtection_Options,
    ReposUpdateBranchProtection_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/branches/:branch/protection": [
    ReposRemoveBranchProtection_Options,
    ReposRemoveBranchProtection_RequestOptions
  ];
  "GET /repos/:owner/:repo/branches/:branch/protection/required_status_checks": [
    ReposGetProtectedBranchRequiredStatusChecks_Options,
    ReposGetProtectedBranchRequiredStatusChecks_RequestOptions
  ];
  "PATCH /repos/:owner/:repo/branches/:branch/protection/required_status_checks": [
    ReposUpdateProtectedBranchRequiredStatusChecks_Options,
    ReposUpdateProtectedBranchRequiredStatusChecks_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/branches/:branch/protection/required_status_checks": [
    ReposRemoveProtectedBranchRequiredStatusChecks_Options,
    ReposRemoveProtectedBranchRequiredStatusChecks_RequestOptions
  ];
  "GET /repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts": [
    ReposListProtectedBranchRequiredStatusChecksContexts_Options,
    ReposListProtectedBranchRequiredStatusChecksContexts_RequestOptions
  ];
  "PUT /repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts": [
    ReposReplaceProtectedBranchRequiredStatusChecksContexts_Options,
    ReposReplaceProtectedBranchRequiredStatusChecksContexts_RequestOptions
  ];
  "POST /repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts": [
    ReposAddProtectedBranchRequiredStatusChecksContexts_Options,
    ReposAddProtectedBranchRequiredStatusChecksContexts_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts": [
    ReposRemoveProtectedBranchRequiredStatusChecksContexts_Options,
    ReposRemoveProtectedBranchRequiredStatusChecksContexts_RequestOptions
  ];
  "GET /repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews": [
    ReposGetProtectedBranchPullRequestReviewEnforcement_Options,
    ReposGetProtectedBranchPullRequestReviewEnforcement_RequestOptions
  ];
  "PATCH /repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews": [
    ReposUpdateProtectedBranchPullRequestReviewEnforcement_Options,
    ReposUpdateProtectedBranchPullRequestReviewEnforcement_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews": [
    ReposRemoveProtectedBranchPullRequestReviewEnforcement_Options,
    ReposRemoveProtectedBranchPullRequestReviewEnforcement_RequestOptions
  ];
  "GET /repos/:owner/:repo/branches/:branch/protection/required_signatures": [
    ReposGetProtectedBranchRequiredSignatures_Options,
    ReposGetProtectedBranchRequiredSignatures_RequestOptions
  ];
  "POST /repos/:owner/:repo/branches/:branch/protection/required_signatures": [
    ReposAddProtectedBranchRequiredSignatures_Options,
    ReposAddProtectedBranchRequiredSignatures_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/branches/:branch/protection/required_signatures": [
    ReposRemoveProtectedBranchRequiredSignatures_Options,
    ReposRemoveProtectedBranchRequiredSignatures_RequestOptions
  ];
  "GET /repos/:owner/:repo/branches/:branch/protection/enforce_admins": [
    ReposGetProtectedBranchAdminEnforcement_Options,
    ReposGetProtectedBranchAdminEnforcement_RequestOptions
  ];
  "POST /repos/:owner/:repo/branches/:branch/protection/enforce_admins": [
    ReposAddProtectedBranchAdminEnforcement_Options,
    ReposAddProtectedBranchAdminEnforcement_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/branches/:branch/protection/enforce_admins": [
    ReposRemoveProtectedBranchAdminEnforcement_Options,
    ReposRemoveProtectedBranchAdminEnforcement_RequestOptions
  ];
  "GET /repos/:owner/:repo/branches/:branch/protection/restrictions": [
    ReposGetProtectedBranchRestrictions_Options,
    ReposGetProtectedBranchRestrictions_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/branches/:branch/protection/restrictions": [
    ReposRemoveProtectedBranchRestrictions_Options,
    ReposRemoveProtectedBranchRestrictions_RequestOptions
  ];
  "GET /repos/:owner/:repo/branches/:branch/protection/restrictions/teams": [
    ReposListProtectedBranchTeamRestrictions_Options,
    ReposListProtectedBranchTeamRestrictions_RequestOptions
  ];
  "PUT /repos/:owner/:repo/branches/:branch/protection/restrictions/teams": [
    ReposReplaceProtectedBranchTeamRestrictions_Options,
    ReposReplaceProtectedBranchTeamRestrictions_RequestOptions
  ];
  "POST /repos/:owner/:repo/branches/:branch/protection/restrictions/teams": [
    ReposAddProtectedBranchTeamRestrictions_Options,
    ReposAddProtectedBranchTeamRestrictions_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/branches/:branch/protection/restrictions/teams": [
    ReposRemoveProtectedBranchTeamRestrictions_Options,
    ReposRemoveProtectedBranchTeamRestrictions_RequestOptions
  ];
  "GET /repos/:owner/:repo/branches/:branch/protection/restrictions/users": [
    ReposListProtectedBranchUserRestrictions_Options,
    ReposListProtectedBranchUserRestrictions_RequestOptions
  ];
  "PUT /repos/:owner/:repo/branches/:branch/protection/restrictions/users": [
    ReposReplaceProtectedBranchUserRestrictions_Options,
    ReposReplaceProtectedBranchUserRestrictions_RequestOptions
  ];
  "POST /repos/:owner/:repo/branches/:branch/protection/restrictions/users": [
    ReposAddProtectedBranchUserRestrictions_Options,
    ReposAddProtectedBranchUserRestrictions_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/branches/:branch/protection/restrictions/users": [
    ReposRemoveProtectedBranchUserRestrictions_Options,
    ReposRemoveProtectedBranchUserRestrictions_RequestOptions
  ];
  "GET /repos/:owner/:repo/collaborators": [
    ReposListCollaborators_Options,
    ReposListCollaborators_RequestOptions
  ];
  "GET /repos/:owner/:repo/collaborators/:username": [
    ReposCheckCollaborator_Options,
    ReposCheckCollaborator_RequestOptions
  ];
  "GET /repos/:owner/:repo/collaborators/:username/permission": [
    ReposGetCollaboratorPermissionLevel_Options,
    ReposGetCollaboratorPermissionLevel_RequestOptions
  ];
  "PUT /repos/:owner/:repo/collaborators/:username": [
    ReposAddCollaborator_Options,
    ReposAddCollaborator_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/collaborators/:username": [
    ReposRemoveCollaborator_Options,
    ReposRemoveCollaborator_RequestOptions
  ];
  "GET /repos/:owner/:repo/comments": [
    ReposListCommitComments_Options,
    ReposListCommitComments_RequestOptions
  ];
  "GET /repos/:owner/:repo/commits/:ref/comments": [
    ReposListCommentsForCommit_Options,
    ReposListCommentsForCommit_RequestOptions
  ];
  "POST /repos/:owner/:repo/commits/:sha/comments": [
    ReposCreateCommitComment_Options,
    ReposCreateCommitComment_RequestOptions
  ];
  "GET /repos/:owner/:repo/comments/:comment_id": [
    ReposGetCommitComment_Options,
    ReposGetCommitComment_RequestOptions
  ];
  "PATCH /repos/:owner/:repo/comments/:comment_id": [
    ReposUpdateCommitComment_Options,
    ReposUpdateCommitComment_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/comments/:comment_id": [
    ReposDeleteCommitComment_Options,
    ReposDeleteCommitComment_RequestOptions
  ];
  "GET /repos/:owner/:repo/commits": [
    ReposListCommits_Options,
    ReposListCommits_RequestOptions
  ];
  "GET /repos/:owner/:repo/commits/:commit_sha": [
    ReposGetCommit_Options,
    ReposGetCommit_RequestOptions
  ];
  "GET /repos/:owner/:repo/commits/:ref": [
    ReposGetCommitRefSha_Options,
    ReposGetCommitRefSha_RequestOptions
  ];
  "GET /repos/:owner/:repo/compare/:base...:head": [
    ReposCompareCommits_Options,
    ReposCompareCommits_RequestOptions
  ];
  "GET /repos/:owner/:repo/commits/:commit_sha/branches-where-head": [
    ReposListBranchesForHeadCommit_Options,
    ReposListBranchesForHeadCommit_RequestOptions
  ];
  "GET /repos/:owner/:repo/commits/:commit_sha/pulls": [
    ReposListPullRequestsAssociatedWithCommit_Options,
    ReposListPullRequestsAssociatedWithCommit_RequestOptions
  ];
  "GET /repos/:owner/:repo/community/profile": [
    ReposRetrieveCommunityProfileMetrics_Options,
    ReposRetrieveCommunityProfileMetrics_RequestOptions
  ];
  "GET /repos/:owner/:repo/readme": [
    ReposGetReadme_Options,
    ReposGetReadme_RequestOptions
  ];
  "GET /repos/:owner/:repo/contents/:path": [
    ReposGetContents_Options,
    ReposGetContents_RequestOptions
  ];
  "PUT /repos/:owner/:repo/contents/:path": [
    ReposCreateFile_Options | ReposUpdateFile_Options,
    ReposCreateFile_RequestOptions | ReposUpdateFile_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/contents/:path": [
    ReposDeleteFile_Options,
    ReposDeleteFile_RequestOptions
  ];
  "GET /repos/:owner/:repo/:archive_format/:ref": [
    ReposGetArchiveLink_Options,
    ReposGetArchiveLink_RequestOptions
  ];
  "GET /repos/:owner/:repo/deployments": [
    ReposListDeployments_Options,
    ReposListDeployments_RequestOptions
  ];
  "GET /repos/:owner/:repo/deployments/:deployment_id": [
    ReposGetDeployment_Options,
    ReposGetDeployment_RequestOptions
  ];
  "POST /repos/:owner/:repo/deployments": [
    ReposCreateDeployment_Options,
    ReposCreateDeployment_RequestOptions
  ];
  "GET /repos/:owner/:repo/deployments/:deployment_id/statuses": [
    ReposListDeploymentStatuses_Options,
    ReposListDeploymentStatuses_RequestOptions
  ];
  "GET /repos/:owner/:repo/deployments/:deployment_id/statuses/:status_id": [
    ReposGetDeploymentStatus_Options,
    ReposGetDeploymentStatus_RequestOptions
  ];
  "POST /repos/:owner/:repo/deployments/:deployment_id/statuses": [
    ReposCreateDeploymentStatus_Options,
    ReposCreateDeploymentStatus_RequestOptions
  ];
  "GET /repos/:owner/:repo/downloads": [
    ReposListDownloads_Options,
    ReposListDownloads_RequestOptions
  ];
  "GET /repos/:owner/:repo/downloads/:download_id": [
    ReposGetDownload_Options,
    ReposGetDownload_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/downloads/:download_id": [
    ReposDeleteDownload_Options,
    ReposDeleteDownload_RequestOptions
  ];
  "GET /repos/:owner/:repo/forks": [
    ReposListForks_Options,
    ReposListForks_RequestOptions
  ];
  "POST /repos/:owner/:repo/forks": [
    ReposCreateFork_Options,
    ReposCreateFork_RequestOptions
  ];
  "GET /repos/:owner/:repo/hooks": [
    ReposListHooks_Options,
    ReposListHooks_RequestOptions
  ];
  "GET /repos/:owner/:repo/hooks/:hook_id": [
    ReposGetHook_Options,
    ReposGetHook_RequestOptions
  ];
  "POST /repos/:owner/:repo/hooks": [
    ReposCreateHook_Options,
    ReposCreateHook_RequestOptions
  ];
  "PATCH /repos/:owner/:repo/hooks/:hook_id": [
    ReposUpdateHook_Options,
    ReposUpdateHook_RequestOptions
  ];
  "POST /repos/:owner/:repo/hooks/:hook_id/tests": [
    ReposTestPushHook_Options,
    ReposTestPushHook_RequestOptions
  ];
  "POST /repos/:owner/:repo/hooks/:hook_id/pings": [
    ReposPingHook_Options,
    ReposPingHook_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/hooks/:hook_id": [
    ReposDeleteHook_Options,
    ReposDeleteHook_RequestOptions
  ];
  "GET /repos/:owner/:repo/invitations": [
    ReposListInvitations_Options,
    ReposListInvitations_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/invitations/:invitation_id": [
    ReposDeleteInvitation_Options,
    ReposDeleteInvitation_RequestOptions
  ];
  "PATCH /repos/:owner/:repo/invitations/:invitation_id": [
    ReposUpdateInvitation_Options,
    ReposUpdateInvitation_RequestOptions
  ];
  "GET /user/repository_invitations": [
    ReposListInvitationsForAuthenticatedUser_Options,
    ReposListInvitationsForAuthenticatedUser_RequestOptions
  ];
  "PATCH /user/repository_invitations/:invitation_id": [
    ReposAcceptInvitation_Options,
    ReposAcceptInvitation_RequestOptions
  ];
  "DELETE /user/repository_invitations/:invitation_id": [
    ReposDeclineInvitation_Options,
    ReposDeclineInvitation_RequestOptions
  ];
  "GET /repos/:owner/:repo/keys": [
    ReposListDeployKeys_Options,
    ReposListDeployKeys_RequestOptions
  ];
  "GET /repos/:owner/:repo/keys/:key_id": [
    ReposGetDeployKey_Options,
    ReposGetDeployKey_RequestOptions
  ];
  "POST /repos/:owner/:repo/keys": [
    ReposAddDeployKey_Options,
    ReposAddDeployKey_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/keys/:key_id": [
    ReposRemoveDeployKey_Options,
    ReposRemoveDeployKey_RequestOptions
  ];
  "POST /repos/:owner/:repo/merges": [
    ReposMerge_Options,
    ReposMerge_RequestOptions
  ];
  "GET /repos/:owner/:repo/pages": [
    ReposGetPages_Options,
    ReposGetPages_RequestOptions
  ];
  "POST /repos/:owner/:repo/pages": [
    ReposEnablePagesSite_Options,
    ReposEnablePagesSite_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/pages": [
    ReposDisablePagesSite_Options,
    ReposDisablePagesSite_RequestOptions
  ];
  "PUT /repos/:owner/:repo/pages": [
    ReposUpdateInformationAboutPagesSite_Options,
    ReposUpdateInformationAboutPagesSite_RequestOptions
  ];
  "POST /repos/:owner/:repo/pages/builds": [
    ReposRequestPageBuild_Options,
    ReposRequestPageBuild_RequestOptions
  ];
  "GET /repos/:owner/:repo/pages/builds": [
    ReposListPagesBuilds_Options,
    ReposListPagesBuilds_RequestOptions
  ];
  "GET /repos/:owner/:repo/pages/builds/latest": [
    ReposGetLatestPagesBuild_Options,
    ReposGetLatestPagesBuild_RequestOptions
  ];
  "GET /repos/:owner/:repo/pages/builds/:build_id": [
    ReposGetPagesBuild_Options,
    ReposGetPagesBuild_RequestOptions
  ];
  "GET /repos/:owner/:repo/releases": [
    ReposListReleases_Options,
    ReposListReleases_RequestOptions
  ];
  "GET /repos/:owner/:repo/releases/:release_id": [
    ReposGetRelease_Options,
    ReposGetRelease_RequestOptions
  ];
  "GET /repos/:owner/:repo/releases/latest": [
    ReposGetLatestRelease_Options,
    ReposGetLatestRelease_RequestOptions
  ];
  "GET /repos/:owner/:repo/releases/tags/:tag": [
    ReposGetReleaseByTag_Options,
    ReposGetReleaseByTag_RequestOptions
  ];
  "POST /repos/:owner/:repo/releases": [
    ReposCreateRelease_Options,
    ReposCreateRelease_RequestOptions
  ];
  "PATCH /repos/:owner/:repo/releases/:release_id": [
    ReposUpdateRelease_Options,
    ReposUpdateRelease_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/releases/:release_id": [
    ReposDeleteRelease_Options,
    ReposDeleteRelease_RequestOptions
  ];
  "GET /repos/:owner/:repo/releases/:release_id/assets": [
    ReposListAssetsForRelease_Options,
    ReposListAssetsForRelease_RequestOptions
  ];
  "POST :url": [
    ReposUploadReleaseAsset_Options,
    ReposUploadReleaseAsset_RequestOptions
  ];
  "GET /repos/:owner/:repo/releases/assets/:asset_id": [
    ReposGetReleaseAsset_Options,
    ReposGetReleaseAsset_RequestOptions
  ];
  "PATCH /repos/:owner/:repo/releases/assets/:asset_id": [
    ReposUpdateReleaseAsset_Options,
    ReposUpdateReleaseAsset_RequestOptions
  ];
  "DELETE /repos/:owner/:repo/releases/assets/:asset_id": [
    ReposDeleteReleaseAsset_Options,
    ReposDeleteReleaseAsset_RequestOptions
  ];
  "GET /repos/:owner/:repo/stats/contributors": [
    ReposGetContributorsStats_Options,
    ReposGetContributorsStats_RequestOptions
  ];
  "GET /repos/:owner/:repo/stats/commit_activity": [
    ReposGetCommitActivityStats_Options,
    ReposGetCommitActivityStats_RequestOptions
  ];
  "GET /repos/:owner/:repo/stats/code_frequency": [
    ReposGetCodeFrequencyStats_Options,
    ReposGetCodeFrequencyStats_RequestOptions
  ];
  "GET /repos/:owner/:repo/stats/participation": [
    ReposGetParticipationStats_Options,
    ReposGetParticipationStats_RequestOptions
  ];
  "GET /repos/:owner/:repo/stats/punch_card": [
    ReposGetPunchCardStats_Options,
    ReposGetPunchCardStats_RequestOptions
  ];
  "POST /repos/:owner/:repo/statuses/:sha": [
    ReposCreateStatus_Options,
    ReposCreateStatus_RequestOptions
  ];
  "GET /repos/:owner/:repo/commits/:ref/statuses": [
    ReposListStatusesForRef_Options,
    ReposListStatusesForRef_RequestOptions
  ];
  "GET /repos/:owner/:repo/commits/:ref/status": [
    ReposGetCombinedStatusForRef_Options,
    ReposGetCombinedStatusForRef_RequestOptions
  ];
  "GET /repos/:owner/:repo/traffic/popular/referrers": [
    ReposGetTopReferrers_Options,
    ReposGetTopReferrers_RequestOptions
  ];
  "GET /repos/:owner/:repo/traffic/popular/paths": [
    ReposGetTopPaths_Options,
    ReposGetTopPaths_RequestOptions
  ];
  "GET /repos/:owner/:repo/traffic/views": [
    ReposGetViews_Options,
    ReposGetViews_RequestOptions
  ];
  "GET /repos/:owner/:repo/traffic/clones": [
    ReposGetClones_Options,
    ReposGetClones_RequestOptions
  ];
  "GET /scim/v2/organizations/:org/Users": [
    ScimListProvisionedIdentities_Options,
    ScimListProvisionedIdentities_RequestOptions
  ];
  "GET /scim/v2/organizations/:org/Users/:scim_user_id": [
    ScimGetProvisioningDetailsForUser_Options,
    ScimGetProvisioningDetailsForUser_RequestOptions
  ];
  "POST /scim/v2/organizations/:org/Users": [
    ScimProvisionAndInviteUsers_Options | ScimProvisionInviteUsers_Options,

      | ScimProvisionAndInviteUsers_RequestOptions
      | ScimProvisionInviteUsers_RequestOptions
  ];
  "PUT /scim/v2/organizations/:org/Users/:scim_user_id": [

      | ScimReplaceProvisionedUserInformation_Options
      | ScimUpdateProvisionedOrgMembership_Options,

      | ScimReplaceProvisionedUserInformation_RequestOptions
      | ScimUpdateProvisionedOrgMembership_RequestOptions
  ];
  "PATCH /scim/v2/organizations/:org/Users/:scim_user_id": [
    ScimUpdateUserAttribute_Options,
    ScimUpdateUserAttribute_RequestOptions
  ];
  "DELETE /scim/v2/organizations/:org/Users/:scim_user_id": [
    ScimRemoveUserFromOrg_Options,
    ScimRemoveUserFromOrg_RequestOptions
  ];
  "GET /search/repositories": [SearchRepos_Options, SearchRepos_RequestOptions];
  "GET /search/commits": [SearchCommits_Options, SearchCommits_RequestOptions];
  "GET /search/code": [SearchCode_Options, SearchCode_RequestOptions];
  "GET /search/issues": [
    SearchIssuesAndPullRequests_Options | SearchIssues_Options,
    SearchIssuesAndPullRequests_RequestOptions | SearchIssues_RequestOptions
  ];
  "GET /search/users": [SearchUsers_Options, SearchUsers_RequestOptions];
  "GET /search/topics": [SearchTopics_Options, SearchTopics_RequestOptions];
  "GET /search/labels": [SearchLabels_Options, SearchLabels_RequestOptions];
  "GET /legacy/issues/search/:owner/:repository/:state/:keyword": [
    SearchIssuesLegacy_Options,
    SearchIssuesLegacy_RequestOptions
  ];
  "GET /legacy/repos/search/:keyword": [
    SearchReposLegacy_Options,
    SearchReposLegacy_RequestOptions
  ];
  "GET /legacy/user/search/:keyword": [
    SearchUsersLegacy_Options,
    SearchUsersLegacy_RequestOptions
  ];
  "GET /legacy/user/email/:email": [
    SearchEmailLegacy_Options,
    SearchEmailLegacy_RequestOptions
  ];
  "GET /orgs/:org/teams": [TeamsList_Options, TeamsList_RequestOptions];
  "GET /teams/:team_id": [TeamsGet_Options, TeamsGet_RequestOptions];
  "GET /orgs/:org/teams/:team_slug": [
    TeamsGetByName_Options,
    TeamsGetByName_RequestOptions
  ];
  "POST /orgs/:org/teams": [TeamsCreate_Options, TeamsCreate_RequestOptions];
  "PATCH /teams/:team_id": [TeamsUpdate_Options, TeamsUpdate_RequestOptions];
  "DELETE /teams/:team_id": [TeamsDelete_Options, TeamsDelete_RequestOptions];
  "GET /teams/:team_id/teams": [
    TeamsListChild_Options,
    TeamsListChild_RequestOptions
  ];
  "GET /teams/:team_id/repos": [
    TeamsListRepos_Options,
    TeamsListRepos_RequestOptions
  ];
  "GET /teams/:team_id/repos/:owner/:repo": [
    TeamsCheckManagesRepo_Options,
    TeamsCheckManagesRepo_RequestOptions
  ];
  "PUT /teams/:team_id/repos/:owner/:repo": [
    TeamsAddOrUpdateRepo_Options,
    TeamsAddOrUpdateRepo_RequestOptions
  ];
  "DELETE /teams/:team_id/repos/:owner/:repo": [
    TeamsRemoveRepo_Options,
    TeamsRemoveRepo_RequestOptions
  ];
  "GET /user/teams": [
    TeamsListForAuthenticatedUser_Options,
    TeamsListForAuthenticatedUser_RequestOptions
  ];
  "GET /teams/:team_id/projects": [
    TeamsListProjects_Options,
    TeamsListProjects_RequestOptions
  ];
  "GET /teams/:team_id/projects/:project_id": [
    TeamsReviewProject_Options,
    TeamsReviewProject_RequestOptions
  ];
  "PUT /teams/:team_id/projects/:project_id": [
    TeamsAddOrUpdateProject_Options,
    TeamsAddOrUpdateProject_RequestOptions
  ];
  "DELETE /teams/:team_id/projects/:project_id": [
    TeamsRemoveProject_Options,
    TeamsRemoveProject_RequestOptions
  ];
  "GET /teams/:team_id/discussions/:discussion_number/comments": [
    TeamsListDiscussionComments_Options,
    TeamsListDiscussionComments_RequestOptions
  ];
  "GET /teams/:team_id/discussions/:discussion_number/comments/:comment_number": [
    TeamsGetDiscussionComment_Options,
    TeamsGetDiscussionComment_RequestOptions
  ];
  "POST /teams/:team_id/discussions/:discussion_number/comments": [
    TeamsCreateDiscussionComment_Options,
    TeamsCreateDiscussionComment_RequestOptions
  ];
  "PATCH /teams/:team_id/discussions/:discussion_number/comments/:comment_number": [
    TeamsUpdateDiscussionComment_Options,
    TeamsUpdateDiscussionComment_RequestOptions
  ];
  "DELETE /teams/:team_id/discussions/:discussion_number/comments/:comment_number": [
    TeamsDeleteDiscussionComment_Options,
    TeamsDeleteDiscussionComment_RequestOptions
  ];
  "GET /teams/:team_id/discussions": [
    TeamsListDiscussions_Options,
    TeamsListDiscussions_RequestOptions
  ];
  "GET /teams/:team_id/discussions/:discussion_number": [
    TeamsGetDiscussion_Options,
    TeamsGetDiscussion_RequestOptions
  ];
  "POST /teams/:team_id/discussions": [
    TeamsCreateDiscussion_Options,
    TeamsCreateDiscussion_RequestOptions
  ];
  "PATCH /teams/:team_id/discussions/:discussion_number": [
    TeamsUpdateDiscussion_Options,
    TeamsUpdateDiscussion_RequestOptions
  ];
  "DELETE /teams/:team_id/discussions/:discussion_number": [
    TeamsDeleteDiscussion_Options,
    TeamsDeleteDiscussion_RequestOptions
  ];
  "GET /teams/:team_id/members": [
    TeamsListMembers_Options,
    TeamsListMembers_RequestOptions
  ];
  "GET /teams/:team_id/members/:username": [
    TeamsGetMember_Options,
    TeamsGetMember_RequestOptions
  ];
  "PUT /teams/:team_id/members/:username": [
    TeamsAddMember_Options,
    TeamsAddMember_RequestOptions
  ];
  "DELETE /teams/:team_id/members/:username": [
    TeamsRemoveMember_Options,
    TeamsRemoveMember_RequestOptions
  ];
  "GET /teams/:team_id/memberships/:username": [
    TeamsGetMembership_Options,
    TeamsGetMembership_RequestOptions
  ];
  "PUT /teams/:team_id/memberships/:username": [
    TeamsAddOrUpdateMembership_Options,
    TeamsAddOrUpdateMembership_RequestOptions
  ];
  "DELETE /teams/:team_id/memberships/:username": [
    TeamsRemoveMembership_Options,
    TeamsRemoveMembership_RequestOptions
  ];
  "GET /teams/:team_id/invitations": [
    TeamsListPendingInvitations_Options,
    TeamsListPendingInvitations_RequestOptions
  ];
  "GET /users/:username": [
    UsersGetByUsername_Options,
    UsersGetByUsername_RequestOptions
  ];
  "GET /user": [
    UsersGetAuthenticated_Options,
    UsersGetAuthenticated_RequestOptions
  ];
  "PATCH /user": [
    UsersUpdateAuthenticated_Options,
    UsersUpdateAuthenticated_RequestOptions
  ];
  "GET /users/:username/hovercard": [
    UsersGetContextForUser_Options,
    UsersGetContextForUser_RequestOptions
  ];
  "GET /users": [UsersList_Options, UsersList_RequestOptions];
  "GET /user/blocks": [
    UsersListBlocked_Options,
    UsersListBlocked_RequestOptions
  ];
  "GET /user/blocks/:username": [
    UsersCheckBlocked_Options,
    UsersCheckBlocked_RequestOptions
  ];
  "PUT /user/blocks/:username": [UsersBlock_Options, UsersBlock_RequestOptions];
  "DELETE /user/blocks/:username": [
    UsersUnblock_Options,
    UsersUnblock_RequestOptions
  ];
  "GET /user/emails": [UsersListEmails_Options, UsersListEmails_RequestOptions];
  "GET /user/public_emails": [
    UsersListPublicEmails_Options,
    UsersListPublicEmails_RequestOptions
  ];
  "POST /user/emails": [UsersAddEmails_Options, UsersAddEmails_RequestOptions];
  "DELETE /user/emails": [
    UsersDeleteEmails_Options,
    UsersDeleteEmails_RequestOptions
  ];
  "PATCH /user/email/visibility": [
    UsersTogglePrimaryEmailVisibility_Options,
    UsersTogglePrimaryEmailVisibility_RequestOptions
  ];
  "GET /users/:username/followers": [
    UsersListFollowersForUser_Options,
    UsersListFollowersForUser_RequestOptions
  ];
  "GET /user/followers": [
    UsersListFollowersForAuthenticatedUser_Options,
    UsersListFollowersForAuthenticatedUser_RequestOptions
  ];
  "GET /users/:username/following": [
    UsersListFollowingForUser_Options,
    UsersListFollowingForUser_RequestOptions
  ];
  "GET /user/following": [
    UsersListFollowingForAuthenticatedUser_Options,
    UsersListFollowingForAuthenticatedUser_RequestOptions
  ];
  "GET /user/following/:username": [
    UsersCheckFollowing_Options,
    UsersCheckFollowing_RequestOptions
  ];
  "GET /users/:username/following/:target_user": [
    UsersCheckFollowingForUser_Options,
    UsersCheckFollowingForUser_RequestOptions
  ];
  "PUT /user/following/:username": [
    UsersFollow_Options,
    UsersFollow_RequestOptions
  ];
  "DELETE /user/following/:username": [
    UsersUnfollow_Options,
    UsersUnfollow_RequestOptions
  ];
  "GET /users/:username/gpg_keys": [
    UsersListGpgKeysForUser_Options,
    UsersListGpgKeysForUser_RequestOptions
  ];
  "GET /user/gpg_keys": [
    UsersListGpgKeys_Options,
    UsersListGpgKeys_RequestOptions
  ];
  "GET /user/gpg_keys/:gpg_key_id": [
    UsersGetGpgKey_Options,
    UsersGetGpgKey_RequestOptions
  ];
  "POST /user/gpg_keys": [
    UsersCreateGpgKey_Options,
    UsersCreateGpgKey_RequestOptions
  ];
  "DELETE /user/gpg_keys/:gpg_key_id": [
    UsersDeleteGpgKey_Options,
    UsersDeleteGpgKey_RequestOptions
  ];
  "GET /users/:username/keys": [
    UsersListPublicKeysForUser_Options,
    UsersListPublicKeysForUser_RequestOptions
  ];
  "GET /user/keys": [
    UsersListPublicKeys_Options,
    UsersListPublicKeys_RequestOptions
  ];
  "GET /user/keys/:key_id": [
    UsersGetPublicKey_Options,
    UsersGetPublicKey_RequestOptions
  ];
  "POST /user/keys": [
    UsersCreatePublicKey_Options,
    UsersCreatePublicKey_RequestOptions
  ];
  "DELETE /user/keys/:key_id": [
    UsersDeletePublicKey_Options,
    UsersDeletePublicKey_RequestOptions
  ];
}

type ActivityListPublicEvents_Options = {
  per_page?: number;
  page?: number;
};
type ActivityListPublicEvents_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListRepoEvents_Options = {
  owner: string;
  repo: string;
  per_page?: number;
  page?: number;
};
type ActivityListRepoEvents_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListPublicEventsForRepoNetwork_Options = {
  owner: string;
  repo: string;
  per_page?: number;
  page?: number;
};
type ActivityListPublicEventsForRepoNetwork_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListPublicEventsForOrg_Options = {
  org: string;
  per_page?: number;
  page?: number;
};
type ActivityListPublicEventsForOrg_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListReceivedEventsForUser_Options = {
  username: string;
  per_page?: number;
  page?: number;
};
type ActivityListReceivedEventsForUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListReceivedPublicEventsForUser_Options = {
  username: string;
  per_page?: number;
  page?: number;
};
type ActivityListReceivedPublicEventsForUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListEventsForUser_Options = {
  username: string;
  per_page?: number;
  page?: number;
};
type ActivityListEventsForUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListPublicEventsForUser_Options = {
  username: string;
  per_page?: number;
  page?: number;
};
type ActivityListPublicEventsForUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListEventsForOrg_Options = {
  username: string;
  org: string;
  per_page?: number;
  page?: number;
};
type ActivityListEventsForOrg_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListFeeds_Options = {};
type ActivityListFeeds_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListNotifications_Options = {
  all?: boolean;
  participating?: boolean;
  since?: string;
  before?: string;
  per_page?: number;
  page?: number;
};
type ActivityListNotifications_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListNotificationsForRepo_Options = {
  owner: string;
  repo: string;
  all?: boolean;
  participating?: boolean;
  since?: string;
  before?: string;
  per_page?: number;
  page?: number;
};
type ActivityListNotificationsForRepo_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityMarkAsRead_Options = {
  last_read_at?: string;
};
type ActivityMarkAsRead_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityMarkNotificationsAsReadForRepo_Options = {
  owner: string;
  repo: string;
  last_read_at?: string;
};
type ActivityMarkNotificationsAsReadForRepo_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityGetThread_Options = {
  thread_id: number;
};
type ActivityGetThread_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityMarkThreadAsRead_Options = {
  thread_id: number;
};
type ActivityMarkThreadAsRead_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityGetThreadSubscription_Options = {
  thread_id: number;
};
type ActivityGetThreadSubscription_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivitySetThreadSubscription_Options = {
  thread_id: number;
  ignored?: boolean;
};
type ActivitySetThreadSubscription_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityDeleteThreadSubscription_Options = {
  thread_id: number;
};
type ActivityDeleteThreadSubscription_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListStargazersForRepo_Options = {
  owner: string;
  repo: string;
  per_page?: number;
  page?: number;
};
type ActivityListStargazersForRepo_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListReposStarredByUser_Options = {
  username: string;
  sort?: string;
  direction?: string;
  per_page?: number;
  page?: number;
};
type ActivityListReposStarredByUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListReposStarredByAuthenticatedUser_Options = {
  sort?: string;
  direction?: string;
  per_page?: number;
  page?: number;
};
type ActivityListReposStarredByAuthenticatedUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityCheckStarringRepo_Options = {
  owner: string;
  repo: string;
};
type ActivityCheckStarringRepo_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityStarRepo_Options = {
  owner: string;
  repo: string;
};
type ActivityStarRepo_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityUnstarRepo_Options = {
  owner: string;
  repo: string;
};
type ActivityUnstarRepo_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListWatchersForRepo_Options = {
  owner: string;
  repo: string;
  per_page?: number;
  page?: number;
};
type ActivityListWatchersForRepo_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListReposWatchedByUser_Options = {
  username: string;
  per_page?: number;
  page?: number;
};
type ActivityListReposWatchedByUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityListWatchedReposForAuthenticatedUser_Options = {
  per_page?: number;
  page?: number;
};
type ActivityListWatchedReposForAuthenticatedUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityGetRepoSubscription_Options = {
  owner: string;
  repo: string;
};
type ActivityGetRepoSubscription_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivitySetRepoSubscription_Options = {
  owner: string;
  repo: string;
  subscribed?: boolean;
  ignored?: boolean;
};
type ActivitySetRepoSubscription_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityDeleteRepoSubscription_Options = {
  owner: string;
  repo: string;
};
type ActivityDeleteRepoSubscription_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityCheckWatchingRepoLegacy_Options = {
  owner: string;
  repo: string;
};
type ActivityCheckWatchingRepoLegacy_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityWatchRepoLegacy_Options = {
  owner: string;
  repo: string;
};
type ActivityWatchRepoLegacy_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ActivityStopWatchingRepoLegacy_Options = {
  owner: string;
  repo: string;
};
type ActivityStopWatchingRepoLegacy_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsGetBySlug_Options = {
  app_slug: string;
};
type AppsGetBySlug_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsGetAuthenticated_Options = {};
type AppsGetAuthenticated_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsListInstallations_Options = {
  per_page?: number;
  page?: number;
};
type AppsListInstallations_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsGetInstallation_Options = {
  installation_id: number;
};
type AppsGetInstallation_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsDeleteInstallation_Options = {
  installation_id: number;
};
type AppsDeleteInstallation_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsCreateInstallationToken_Options = {
  installation_id: number;
};
type AppsCreateInstallationToken_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsGetOrgInstallation_Options = {
  org: string;
};
type AppsGetOrgInstallation_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsFindOrgInstallation_Options = {
  org: string;
};
type AppsFindOrgInstallation_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsGetRepoInstallation_Options = {
  owner: string;
  repo: string;
};
type AppsGetRepoInstallation_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsFindRepoInstallation_Options = {
  owner: string;
  repo: string;
};
type AppsFindRepoInstallation_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsGetUserInstallation_Options = {
  username: string;
};
type AppsGetUserInstallation_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsFindUserInstallation_Options = {
  username: string;
};
type AppsFindUserInstallation_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsCreateFromManifest_Options = {
  code: string;
};
type AppsCreateFromManifest_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsListRepos_Options = {
  per_page?: number;
  page?: number;
};
type AppsListRepos_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsListInstallationsForAuthenticatedUser_Options = {
  per_page?: number;
  page?: number;
};
type AppsListInstallationsForAuthenticatedUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsListInstallationReposForAuthenticatedUser_Options = {
  installation_id: number;
  per_page?: number;
  page?: number;
};
type AppsListInstallationReposForAuthenticatedUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsAddRepoToInstallation_Options = {
  installation_id: number;
  repository_id: number;
};
type AppsAddRepoToInstallation_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsRemoveRepoFromInstallation_Options = {
  installation_id: number;
  repository_id: number;
};
type AppsRemoveRepoFromInstallation_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsCreateContentAttachment_Options = {
  content_reference_id: number;
  title: string;
  body: string;
};
type AppsCreateContentAttachment_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsListPlans_Options = {
  per_page?: number;
  page?: number;
};
type AppsListPlans_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsListPlansStubbed_Options = {
  per_page?: number;
  page?: number;
};
type AppsListPlansStubbed_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsListAccountsUserOrOrgOnPlan_Options = {
  plan_id: number;
  sort?: string;
  direction?: string;
  per_page?: number;
  page?: number;
};
type AppsListAccountsUserOrOrgOnPlan_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsListAccountsUserOrOrgOnPlanStubbed_Options = {
  plan_id: number;
  sort?: string;
  direction?: string;
  per_page?: number;
  page?: number;
};
type AppsListAccountsUserOrOrgOnPlanStubbed_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsCheckAccountIsAssociatedWithAny_Options = {
  account_id: number;
  per_page?: number;
  page?: number;
};
type AppsCheckAccountIsAssociatedWithAny_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsCheckAccountIsAssociatedWithAnyStubbed_Options = {
  account_id: number;
  per_page?: number;
  page?: number;
};
type AppsCheckAccountIsAssociatedWithAnyStubbed_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsListMarketplacePurchasesForAuthenticatedUser_Options = {
  per_page?: number;
  page?: number;
};
type AppsListMarketplacePurchasesForAuthenticatedUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type AppsListMarketplacePurchasesForAuthenticatedUserStubbed_Options = {
  per_page?: number;
  page?: number;
};
type AppsListMarketplacePurchasesForAuthenticatedUserStubbed_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ChecksCreate_Options = {
  owner: string;
  repo: string;
  name: string;
  head_sha: string;
  details_url?: string;
  external_id?: string;
  status?: string;
  started_at?: string;
  conclusion?: string;
  completed_at?: string;
  output?: object;
  "output.title": string;
  "output.summary": string;
  "output.text"?: string;
  "output.annotations"?: object[];
  "output.annotations[].path": string;
  "output.annotations[].start_line": number;
  "output.annotations[].end_line": number;
  "output.annotations[].start_column"?: number;
  "output.annotations[].end_column"?: number;
  "output.annotations[].annotation_level": string;
  "output.annotations[].message": string;
  "output.annotations[].title"?: string;
  "output.annotations[].raw_details"?: string;
  "output.images"?: object[];
  "output.images[].alt": string;
  "output.images[].image_url": string;
  "output.images[].caption"?: string;
  actions?: object[];
  "actions[].label": string;
  "actions[].description": string;
  "actions[].identifier": string;
};
type ChecksCreate_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ChecksUpdate_Options = {
  owner: string;
  repo: string;
  check_run_id: number;
  name?: string;
  details_url?: string;
  external_id?: string;
  started_at?: string;
  status?: string;
  conclusion?: string;
  completed_at?: string;
  output?: object;
  "output.title"?: string;
  "output.summary": string;
  "output.text"?: string;
  "output.annotations"?: object[];
  "output.annotations[].path": string;
  "output.annotations[].start_line": number;
  "output.annotations[].end_line": number;
  "output.annotations[].start_column"?: number;
  "output.annotations[].end_column"?: number;
  "output.annotations[].annotation_level": string;
  "output.annotations[].message": string;
  "output.annotations[].title"?: string;
  "output.annotations[].raw_details"?: string;
  "output.images"?: object[];
  "output.images[].alt": string;
  "output.images[].image_url": string;
  "output.images[].caption"?: string;
  actions?: object[];
  "actions[].label": string;
  "actions[].description": string;
  "actions[].identifier": string;
};
type ChecksUpdate_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ChecksListForRef_Options = {
  owner: string;
  repo: string;
  ref: string;
  check_name?: string;
  status?: string;
  filter?: string;
  per_page?: number;
  page?: number;
};
type ChecksListForRef_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ChecksListForSuite_Options = {
  owner: string;
  repo: string;
  check_suite_id: number;
  check_name?: string;
  status?: string;
  filter?: string;
  per_page?: number;
  page?: number;
};
type ChecksListForSuite_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ChecksGet_Options = {
  owner: string;
  repo: string;
  check_run_id: number;
};
type ChecksGet_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ChecksListAnnotations_Options = {
  owner: string;
  repo: string;
  check_run_id: number;
  per_page?: number;
  page?: number;
};
type ChecksListAnnotations_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ChecksGetSuite_Options = {
  owner: string;
  repo: string;
  check_suite_id: number;
};
type ChecksGetSuite_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ChecksListSuitesForRef_Options = {
  owner: string;
  repo: string;
  ref: string;
  app_id?: number;
  check_name?: string;
  per_page?: number;
  page?: number;
};
type ChecksListSuitesForRef_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ChecksSetSuitesPreferences_Options = {
  owner: string;
  repo: string;
  auto_trigger_checks?: object[];
  "auto_trigger_checks[].app_id": number;
  "auto_trigger_checks[].setting": boolean;
};
type ChecksSetSuitesPreferences_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ChecksCreateSuite_Options = {
  owner: string;
  repo: string;
  head_sha: string;
};
type ChecksCreateSuite_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ChecksRerequestSuite_Options = {
  owner: string;
  repo: string;
  check_suite_id: number;
};
type ChecksRerequestSuite_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type CodesOfConductListConductCodes_Options = {};
type CodesOfConductListConductCodes_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type CodesOfConductGetConductCode_Options = {
  key: string;
};
type CodesOfConductGetConductCode_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type CodesOfConductGetForRepo_Options = {
  owner: string;
  repo: string;
};
type CodesOfConductGetForRepo_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type EmojisGet_Options = {};
type EmojisGet_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsListPublicForUser_Options = {
  username: string;
  since?: string;
  per_page?: number;
  page?: number;
};
type GistsListPublicForUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsList_Options = {
  since?: string;
  per_page?: number;
  page?: number;
};
type GistsList_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsListPublic_Options = {
  since?: string;
  per_page?: number;
  page?: number;
};
type GistsListPublic_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsListStarred_Options = {
  since?: string;
  per_page?: number;
  page?: number;
};
type GistsListStarred_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsGet_Options = {
  gist_id: string;
};
type GistsGet_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsGetRevision_Options = {
  gist_id: string;
  sha: string;
};
type GistsGetRevision_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsCreate_Options = {
  files: object;
  "files.content"?: string;
  description?: string;
  public?: boolean;
};
type GistsCreate_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsUpdate_Options = {
  gist_id: string;
  description?: string;
  files?: object;
  "files.content"?: string;
  "files.filename"?: string;
};
type GistsUpdate_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsListCommits_Options = {
  gist_id: string;
  per_page?: number;
  page?: number;
};
type GistsListCommits_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsStar_Options = {
  gist_id: string;
};
type GistsStar_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsUnstar_Options = {
  gist_id: string;
};
type GistsUnstar_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsCheckIsStarred_Options = {
  gist_id: string;
};
type GistsCheckIsStarred_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsFork_Options = {
  gist_id: string;
};
type GistsFork_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsListForks_Options = {
  gist_id: string;
  per_page?: number;
  page?: number;
};
type GistsListForks_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsDelete_Options = {
  gist_id: string;
};
type GistsDelete_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsListComments_Options = {
  gist_id: string;
  per_page?: number;
  page?: number;
};
type GistsListComments_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsGetComment_Options = {
  gist_id: string;
  comment_id: number;
};
type GistsGetComment_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsCreateComment_Options = {
  gist_id: string;
  body: string;
};
type GistsCreateComment_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsUpdateComment_Options = {
  gist_id: string;
  comment_id: number;
  body: string;
};
type GistsUpdateComment_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GistsDeleteComment_Options = {
  gist_id: string;
  comment_id: number;
};
type GistsDeleteComment_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitGetBlob_Options = {
  owner: string;
  repo: string;
  file_sha: string;
};
type GitGetBlob_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitCreateBlob_Options = {
  owner: string;
  repo: string;
  content: string;
  encoding?: string;
};
type GitCreateBlob_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitGetCommit_Options = {
  owner: string;
  repo: string;
  commit_sha: string;
};
type GitGetCommit_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitCreateCommit_Options = {
  owner: string;
  repo: string;
  message: string;
  tree: string;
  parents: string[];
  author?: object;
  "author.name"?: string;
  "author.email"?: string;
  "author.date"?: string;
  committer?: object;
  "committer.name"?: string;
  "committer.email"?: string;
  "committer.date"?: string;
  signature?: string;
};
type GitCreateCommit_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitGetRef_Options = {
  owner: string;
  repo: string;
  ref: string;
};
type GitGetRef_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitListRefs_Options = {
  owner: string;
  repo: string;
  namespace?: string;
  per_page?: number;
  page?: number;
};
type GitListRefs_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitCreateRef_Options = {
  owner: string;
  repo: string;
  ref: string;
  sha: string;
};
type GitCreateRef_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitUpdateRef_Options = {
  owner: string;
  repo: string;
  ref: string;
  sha: string;
  force?: boolean;
};
type GitUpdateRef_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitDeleteRef_Options = {
  owner: string;
  repo: string;
  ref: string;
};
type GitDeleteRef_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitGetTag_Options = {
  owner: string;
  repo: string;
  tag_sha: string;
};
type GitGetTag_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitCreateTag_Options = {
  owner: string;
  repo: string;
  tag: string;
  message: string;
  object: string;
  type: string;
  tagger?: object;
  "tagger.name"?: string;
  "tagger.email"?: string;
  "tagger.date"?: string;
};
type GitCreateTag_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitGetTree_Options = {
  owner: string;
  repo: string;
  tree_sha: string;
  recursive?: number;
};
type GitGetTree_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitCreateTree_Options = {
  owner: string;
  repo: string;
  tree: object[];
  "tree[].path"?: string;
  "tree[].mode"?: string;
  "tree[].type"?: string;
  "tree[].sha"?: string;
  "tree[].content"?: string;
  base_tree?: string;
};
type GitCreateTree_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitignoreListTemplates_Options = {};
type GitignoreListTemplates_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type GitignoreGetTemplate_Options = {
  name: string;
};
type GitignoreGetTemplate_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type InteractionsGetRestrictionsForOrg_Options = {
  org: string;
};
type InteractionsGetRestrictionsForOrg_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type InteractionsAddOrUpdateRestrictionsForOrg_Options = {
  org: string;
  limit: string;
};
type InteractionsAddOrUpdateRestrictionsForOrg_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type InteractionsRemoveRestrictionsForOrg_Options = {
  org: string;
};
type InteractionsRemoveRestrictionsForOrg_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type InteractionsGetRestrictionsForRepo_Options = {
  owner: string;
  repo: string;
};
type InteractionsGetRestrictionsForRepo_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type InteractionsAddOrUpdateRestrictionsForRepo_Options = {
  owner: string;
  repo: string;
  limit: string;
};
type InteractionsAddOrUpdateRestrictionsForRepo_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type InteractionsRemoveRestrictionsForRepo_Options = {
  owner: string;
  repo: string;
};
type InteractionsRemoveRestrictionsForRepo_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesList_Options = {
  filter?: string;
  state?: string;
  labels?: string;
  sort?: string;
  direction?: string;
  since?: string;
  per_page?: number;
  page?: number;
};
type IssuesList_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesListForAuthenticatedUser_Options = {
  filter?: string;
  state?: string;
  labels?: string;
  sort?: string;
  direction?: string;
  since?: string;
  per_page?: number;
  page?: number;
};
type IssuesListForAuthenticatedUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesListForOrg_Options = {
  org: string;
  filter?: string;
  state?: string;
  labels?: string;
  sort?: string;
  direction?: string;
  since?: string;
  per_page?: number;
  page?: number;
};
type IssuesListForOrg_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesListForRepo_Options = {
  owner: string;
  repo: string;
  milestone?: string;
  state?: string;
  assignee?: string;
  creator?: string;
  mentioned?: string;
  labels?: string;
  sort?: string;
  direction?: string;
  since?: string;
  per_page?: number;
  page?: number;
};
type IssuesListForRepo_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesGet_Options = {
  owner: string;
  repo: string;
  issue_number: number;
  number?: number;
};
type IssuesGet_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesCreate_Options = {
  owner: string;
  repo: string;
  title: string;
  body?: string;
  assignee?: string;
  milestone?: number;
  labels?: string[];
  assignees?: string[];
};
type IssuesCreate_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesUpdate_Options = {
  owner: string;
  repo: string;
  issue_number: number;
  title?: string;
  body?: string;
  assignee?: string;
  state?: string;
  milestone?: number | null;
  labels?: string[];
  assignees?: string[];
  number?: number;
};
type IssuesUpdate_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesLock_Options = {
  owner: string;
  repo: string;
  issue_number: number;
  lock_reason?: string;
  number?: number;
};
type IssuesLock_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesUnlock_Options = {
  owner: string;
  repo: string;
  issue_number: number;
  number?: number;
};
type IssuesUnlock_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesListAssignees_Options = {
  owner: string;
  repo: string;
  per_page?: number;
  page?: number;
};
type IssuesListAssignees_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesCheckAssignee_Options = {
  owner: string;
  repo: string;
  assignee: string;
};
type IssuesCheckAssignee_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesAddAssignees_Options = {
  owner: string;
  repo: string;
  issue_number: number;
  assignees?: string[];
  number?: number;
};
type IssuesAddAssignees_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesRemoveAssignees_Options = {
  owner: string;
  repo: string;
  issue_number: number;
  assignees?: string[];
  number?: number;
};
type IssuesRemoveAssignees_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesListComments_Options = {
  owner: string;
  repo: string;
  issue_number: number;
  since?: string;
  per_page?: number;
  page?: number;
  number?: number;
};
type IssuesListComments_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesListCommentsForRepo_Options = {
  owner: string;
  repo: string;
  sort?: string;
  direction?: string;
  since?: string;
};
type IssuesListCommentsForRepo_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesGetComment_Options = {
  owner: string;
  repo: string;
  comment_id: number;
  per_page?: number;
  page?: number;
};
type IssuesGetComment_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesCreateComment_Options = {
  owner: string;
  repo: string;
  issue_number: number;
  body: string;
  number?: number;
};
type IssuesCreateComment_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesUpdateComment_Options = {
  owner: string;
  repo: string;
  comment_id: number;
  body: string;
};
type IssuesUpdateComment_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesDeleteComment_Options = {
  owner: string;
  repo: string;
  comment_id: number;
};
type IssuesDeleteComment_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesListEvents_Options = {
  owner: string;
  repo: string;
  issue_number: number;
  per_page?: number;
  page?: number;
  number?: number;
};
type IssuesListEvents_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesListEventsForRepo_Options = {
  owner: string;
  repo: string;
  per_page?: number;
  page?: number;
};
type IssuesListEventsForRepo_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesGetEvent_Options = {
  owner: string;
  repo: string;
  event_id: number;
};
type IssuesGetEvent_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesListLabelsForRepo_Options = {
  owner: string;
  repo: string;
  per_page?: number;
  page?: number;
};
type IssuesListLabelsForRepo_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesGetLabel_Options = {
  owner: string;
  repo: string;
  name: string;
};
type IssuesGetLabel_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesCreateLabel_Options = {
  owner: string;
  repo: string;
  name: string;
  color: string;
  description?: string;
};
type IssuesCreateLabel_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesUpdateLabel_Options = {
  owner: string;
  repo: string;
  current_name: string;
  name?: string;
  color?: string;
  description?: string;
};
type IssuesUpdateLabel_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesDeleteLabel_Options = {
  owner: string;
  repo: string;
  name: string;
};
type IssuesDeleteLabel_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesListLabelsOnIssue_Options = {
  owner: string;
  repo: string;
  issue_number: number;
  per_page?: number;
  page?: number;
  number?: number;
};
type IssuesListLabelsOnIssue_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesAddLabels_Options = {
  owner: string;
  repo: string;
  issue_number: number;
  labels: string[];
  number?: number;
};
type IssuesAddLabels_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesRemoveLabel_Options = {
  owner: string;
  repo: string;
  issue_number: number;
  name: string;
  number?: number;
};
type IssuesRemoveLabel_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesReplaceLabels_Options = {
  owner: string;
  repo: string;
  issue_number: number;
  labels?: string[];
  number?: number;
};
type IssuesReplaceLabels_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesRemoveLabels_Options = {
  owner: string;
  repo: string;
  issue_number: number;
  number?: number;
};
type IssuesRemoveLabels_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesListLabelsForMilestone_Options = {
  owner: string;
  repo: string;
  milestone_number: number;
  per_page?: number;
  page?: number;
  number?: number;
};
type IssuesListLabelsForMilestone_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesListMilestonesForRepo_Options = {
  owner: string;
  repo: string;
  state?: string;
  sort?: string;
  direction?: string;
  per_page?: number;
  page?: number;
};
type IssuesListMilestonesForRepo_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesGetMilestone_Options = {
  owner: string;
  repo: string;
  milestone_number: number;
  number?: number;
};
type IssuesGetMilestone_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesCreateMilestone_Options = {
  owner: string;
  repo: string;
  title: string;
  state?: string;
  description?: string;
  due_on?: string;
};
type IssuesCreateMilestone_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesUpdateMilestone_Options = {
  owner: string;
  repo: string;
  milestone_number: number;
  title?: string;
  state?: string;
  description?: string;
  due_on?: string;
  number?: number;
};
type IssuesUpdateMilestone_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesDeleteMilestone_Options = {
  owner: string;
  repo: string;
  milestone_number: number;
  number?: number;
};
type IssuesDeleteMilestone_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type IssuesListEventsForTimeline_Options = {
  owner: string;
  repo: string;
  issue_number: number;
  per_page?: number;
  page?: number;
  number?: number;
};
type IssuesListEventsForTimeline_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type LicensesListCommonlyUsed_Options = {};
type LicensesListCommonlyUsed_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type LicensesList_Options = {};
type LicensesList_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type LicensesGet_Options = {
  license: string;
};
type LicensesGet_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type LicensesGetForRepo_Options = {
  owner: string;
  repo: string;
};
type LicensesGetForRepo_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MarkdownRender_Options = {
  text: string;
  mode?: string;
  context?: string;
};
type MarkdownRender_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MarkdownRenderRaw_Options = {
  data: string;
};
type MarkdownRenderRaw_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MetaGet_Options = {};
type MetaGet_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsStartForOrg_Options = {
  org: string;
  repositories: string[];
  lock_repositories?: boolean;
  exclude_attachments?: boolean;
};
type MigrationsStartForOrg_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsListForOrg_Options = {
  org: string;
  per_page?: number;
  page?: number;
};
type MigrationsListForOrg_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsGetStatusForOrg_Options = {
  org: string;
  migration_id: number;
};
type MigrationsGetStatusForOrg_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsGetArchiveForOrg_Options = {
  org: string;
  migration_id: number;
};
type MigrationsGetArchiveForOrg_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsDeleteArchiveForOrg_Options = {
  org: string;
  migration_id: number;
};
type MigrationsDeleteArchiveForOrg_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsUnlockRepoForOrg_Options = {
  org: string;
  migration_id: number;
  repo_name: string;
};
type MigrationsUnlockRepoForOrg_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsStartImport_Options = {
  owner: string;
  repo: string;
  vcs_url: string;
  vcs?: string;
  vcs_username?: string;
  vcs_password?: string;
  tfvc_project?: string;
};
type MigrationsStartImport_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsGetImportProgress_Options = {
  owner: string;
  repo: string;
};
type MigrationsGetImportProgress_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsUpdateImport_Options = {
  owner: string;
  repo: string;
  vcs_username?: string;
  vcs_password?: string;
};
type MigrationsUpdateImport_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsGetCommitAuthors_Options = {
  owner: string;
  repo: string;
  since?: string;
};
type MigrationsGetCommitAuthors_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsMapCommitAuthor_Options = {
  owner: string;
  repo: string;
  author_id: number;
  email?: string;
  name?: string;
};
type MigrationsMapCommitAuthor_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsSetLfsPreference_Options = {
  owner: string;
  repo: string;
  use_lfs: string;
};
type MigrationsSetLfsPreference_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsGetLargeFiles_Options = {
  owner: string;
  repo: string;
};
type MigrationsGetLargeFiles_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsCancelImport_Options = {
  owner: string;
  repo: string;
};
type MigrationsCancelImport_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsStartForAuthenticatedUser_Options = {
  repositories: string[];
  lock_repositories?: boolean;
  exclude_attachments?: boolean;
};
type MigrationsStartForAuthenticatedUser_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsListForAuthenticatedUser_Options = {
  per_page?: number;
  page?: number;
};
type MigrationsListForAuthenticatedUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsGetStatusForAuthenticatedUser_Options = {
  migration_id: number;
};
type MigrationsGetStatusForAuthenticatedUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsGetArchiveForAuthenticatedUser_Options = {
  migration_id: number;
};
type MigrationsGetArchiveForAuthenticatedUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsDeleteArchiveForAuthenticatedUser_Options = {
  migration_id: number;
};
type MigrationsDeleteArchiveForAuthenticatedUser_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type MigrationsUnlockRepoForAuthenticatedUser_Options = {
  migration_id: number;
  repo_name: string;
};
type MigrationsUnlockRepoForAuthenticatedUser_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsListGrants_Options = {
  per_page?: number;
  page?: number;
};
type OauthAuthorizationsListGrants_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsGetGrant_Options = {
  grant_id: number;
};
type OauthAuthorizationsGetGrant_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsDeleteGrant_Options = {
  grant_id: number;
};
type OauthAuthorizationsDeleteGrant_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsListAuthorizations_Options = {
  per_page?: number;
  page?: number;
};
type OauthAuthorizationsListAuthorizations_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsGetAuthorization_Options = {
  authorization_id: number;
};
type OauthAuthorizationsGetAuthorization_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsCreateAuthorization_Options = {
  scopes?: string[];
  note: string;
  note_url?: string;
  client_id?: string;
  client_secret?: string;
  fingerprint?: string;
};
type OauthAuthorizationsCreateAuthorization_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsGetOrCreateAuthorizationForApp_Options = {
  client_id: string;
  client_secret: string;
  scopes?: string[];
  note?: string;
  note_url?: string;
  fingerprint?: string;
};
type OauthAuthorizationsGetOrCreateAuthorizationForApp_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint_Options = {
  client_id: string;
  fingerprint: string;
  client_secret: string;
  scopes?: string[];
  note?: string;
  note_url?: string;
};
type OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsGetOrCreateAuthorizationForAppFingerprint_Options = {
  client_id: string;
  fingerprint: string;
  client_secret: string;
  scopes?: string[];
  note?: string;
  note_url?: string;
};
type OauthAuthorizationsGetOrCreateAuthorizationForAppFingerprint_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsUpdateAuthorization_Options = {
  authorization_id: number;
  scopes?: string[];
  add_scopes?: string[];
  remove_scopes?: string[];
  note?: string;
  note_url?: string;
  fingerprint?: string;
};
type OauthAuthorizationsUpdateAuthorization_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsDeleteAuthorization_Options = {
  authorization_id: number;
};
type OauthAuthorizationsDeleteAuthorization_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsCheckAuthorization_Options = {
  client_id: string;
  access_token: string;
};
type OauthAuthorizationsCheckAuthorization_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsResetAuthorization_Options = {
  client_id: string;
  access_token: string;
};
type OauthAuthorizationsResetAuthorization_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsRevokeAuthorizationForApplication_Options = {
  client_id: string;
  access_token: string;
};
type OauthAuthorizationsRevokeAuthorizationForApplication_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OauthAuthorizationsRevokeGrantForApplication_Options = {
  client_id: string;
  access_token: string;
};
type OauthAuthorizationsRevokeGrantForApplication_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsListForAuthenticatedUser_Options = {
  per_page?: number;
  page?: number;
};
type OrgsListForAuthenticatedUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsList_Options = {
  since?: string;
  per_page?: number;
  page?: number;
};
type OrgsList_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsListForUser_Options = {
  username: string;
  per_page?: number;
  page?: number;
};
type OrgsListForUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsGet_Options = {
  org: string;
};
type OrgsGet_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsUpdate_Options = {
  org: string;
  billing_email?: string;
  company?: string;
  email?: string;
  location?: string;
  name?: string;
  description?: string;
  has_organization_projects?: boolean;
  has_repository_projects?: boolean;
  default_repository_permission?: string;
  members_can_create_repositories?: boolean;
  members_allowed_repository_creation_type?: string;
};
type OrgsUpdate_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsListCredentialAuthorizations_Options = {
  org: string;
};
type OrgsListCredentialAuthorizations_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsRemoveCredentialAuthorization_Options = {
  org: string;
  credential_id: number;
};
type OrgsRemoveCredentialAuthorization_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsListBlockedUsers_Options = {
  org: string;
};
type OrgsListBlockedUsers_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsCheckBlockedUser_Options = {
  org: string;
  username: string;
};
type OrgsCheckBlockedUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsBlockUser_Options = {
  org: string;
  username: string;
};
type OrgsBlockUser_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsUnblockUser_Options = {
  org: string;
  username: string;
};
type OrgsUnblockUser_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsListHooks_Options = {
  org: string;
  per_page?: number;
  page?: number;
};
type OrgsListHooks_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsGetHook_Options = {
  org: string;
  hook_id: number;
};
type OrgsGetHook_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsCreateHook_Options = {
  org: string;
  name: string;
  config: object;
  "config.url": string;
  "config.content_type"?: string;
  "config.secret"?: string;
  "config.insecure_ssl"?: string;
  events?: string[];
  active?: boolean;
};
type OrgsCreateHook_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsUpdateHook_Options = {
  org: string;
  hook_id: number;
  config?: object;
  "config.url": string;
  "config.content_type"?: string;
  "config.secret"?: string;
  "config.insecure_ssl"?: string;
  events?: string[];
  active?: boolean;
};
type OrgsUpdateHook_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsPingHook_Options = {
  org: string;
  hook_id: number;
};
type OrgsPingHook_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsDeleteHook_Options = {
  org: string;
  hook_id: number;
};
type OrgsDeleteHook_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsListMembers_Options = {
  org: string;
  filter?: string;
  role?: string;
  per_page?: number;
  page?: number;
};
type OrgsListMembers_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsCheckMembership_Options = {
  org: string;
  username: string;
};
type OrgsCheckMembership_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsRemoveMember_Options = {
  org: string;
  username: string;
};
type OrgsRemoveMember_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsListPublicMembers_Options = {
  org: string;
  per_page?: number;
  page?: number;
};
type OrgsListPublicMembers_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsCheckPublicMembership_Options = {
  org: string;
  username: string;
};
type OrgsCheckPublicMembership_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsPublicizeMembership_Options = {
  org: string;
  username: string;
};
type OrgsPublicizeMembership_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsConcealMembership_Options = {
  org: string;
  username: string;
};
type OrgsConcealMembership_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsGetMembership_Options = {
  org: string;
  username: string;
};
type OrgsGetMembership_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsAddOrUpdateMembership_Options = {
  org: string;
  username: string;
  role?: string;
};
type OrgsAddOrUpdateMembership_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsRemoveMembership_Options = {
  org: string;
  username: string;
};
type OrgsRemoveMembership_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsListInvitationTeams_Options = {
  org: string;
  invitation_id: number;
  per_page?: number;
  page?: number;
};
type OrgsListInvitationTeams_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsListPendingInvitations_Options = {
  org: string;
  per_page?: number;
  page?: number;
};
type OrgsListPendingInvitations_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsCreateInvitation_Options = {
  org: string;
  invitee_id?: number;
  email?: string;
  role?: string;
  team_ids?: number[];
};
type OrgsCreateInvitation_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsListMemberships_Options = {
  state?: string;
  per_page?: number;
  page?: number;
};
type OrgsListMemberships_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsGetMembershipForAuthenticatedUser_Options = {
  org: string;
};
type OrgsGetMembershipForAuthenticatedUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsUpdateMembership_Options = {
  org: string;
  state: string;
};
type OrgsUpdateMembership_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsListOutsideCollaborators_Options = {
  org: string;
  filter?: string;
  per_page?: number;
  page?: number;
};
type OrgsListOutsideCollaborators_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsRemoveOutsideCollaborator_Options = {
  org: string;
  username: string;
};
type OrgsRemoveOutsideCollaborator_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type OrgsConvertMemberToOutsideCollaborator_Options = {
  org: string;
  username: string;
};
type OrgsConvertMemberToOutsideCollaborator_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsListForRepo_Options = {
  owner: string;
  repo: string;
  state?: string;
  per_page?: number;
  page?: number;
};
type ProjectsListForRepo_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsListForOrg_Options = {
  org: string;
  state?: string;
  per_page?: number;
  page?: number;
};
type ProjectsListForOrg_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsListForUser_Options = {
  username: string;
  state?: string;
  per_page?: number;
  page?: number;
};
type ProjectsListForUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsGet_Options = {
  project_id: number;
  per_page?: number;
  page?: number;
};
type ProjectsGet_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsCreateForRepo_Options = {
  owner: string;
  repo: string;
  name: string;
  body?: string;
  per_page?: number;
  page?: number;
};
type ProjectsCreateForRepo_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsCreateForOrg_Options = {
  org: string;
  name: string;
  body?: string;
  per_page?: number;
  page?: number;
};
type ProjectsCreateForOrg_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsCreateForAuthenticatedUser_Options = {
  name: string;
  body?: string;
  per_page?: number;
  page?: number;
};
type ProjectsCreateForAuthenticatedUser_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsUpdate_Options = {
  project_id: number;
  name?: string;
  body?: string;
  state?: string;
  organization_permission?: string;
  private?: boolean;
  per_page?: number;
  page?: number;
};
type ProjectsUpdate_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsDelete_Options = {
  project_id: number;
};
type ProjectsDelete_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsListCards_Options = {
  column_id: number;
  archived_state?: string;
  per_page?: number;
  page?: number;
};
type ProjectsListCards_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsGetCard_Options = {
  card_id: number;
};
type ProjectsGetCard_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsCreateCard_Options = {
  column_id: number;
  note?: string;
  content_id?: number;
  content_type?: string;
};
type ProjectsCreateCard_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsUpdateCard_Options = {
  card_id: number;
  note?: string;
  archived?: boolean;
};
type ProjectsUpdateCard_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsDeleteCard_Options = {
  card_id: number;
};
type ProjectsDeleteCard_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsMoveCard_Options = {
  card_id: number;
  position: string;
  column_id?: number;
};
type ProjectsMoveCard_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsListCollaborators_Options = {
  project_id: number;
  affiliation?: string;
  per_page?: number;
  page?: number;
};
type ProjectsListCollaborators_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsReviewUserPermissionLevel_Options = {
  project_id: number;
  username: string;
};
type ProjectsReviewUserPermissionLevel_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsAddCollaborator_Options = {
  project_id: number;
  username: string;
  permission?: string;
};
type ProjectsAddCollaborator_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsRemoveCollaborator_Options = {
  project_id: number;
  username: string;
};
type ProjectsRemoveCollaborator_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsListColumns_Options = {
  project_id: number;
  per_page?: number;
  page?: number;
};
type ProjectsListColumns_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsGetColumn_Options = {
  column_id: number;
};
type ProjectsGetColumn_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsCreateColumn_Options = {
  project_id: number;
  name: string;
};
type ProjectsCreateColumn_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsUpdateColumn_Options = {
  column_id: number;
  name: string;
};
type ProjectsUpdateColumn_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsDeleteColumn_Options = {
  column_id: number;
};
type ProjectsDeleteColumn_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ProjectsMoveColumn_Options = {
  column_id: number;
  position: string;
};
type ProjectsMoveColumn_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsList_Options = {
  owner: string;
  repo: string;
  state?: string;
  head?: string;
  base?: string;
  sort?: string;
  direction?: string;
  per_page?: number;
  page?: number;
};
type PullsList_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsGet_Options = {
  owner: string;
  repo: string;
  pull_number: number;
  number?: number;
};
type PullsGet_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsCreate_Options = {
  owner: string;
  repo: string;
  title: string;
  head: string;
  base: string;
  body?: string;
  maintainer_can_modify?: boolean;
  draft?: boolean;
};
type PullsCreate_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsCreateFromIssue_Options = {
  owner: string;
  repo: string;
  issue: number;
  head: string;
  base: string;
  maintainer_can_modify?: boolean;
  draft?: boolean;
};
type PullsCreateFromIssue_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsUpdate_Options = {
  owner: string;
  repo: string;
  pull_number: number;
  title?: string;
  body?: string;
  state?: string;
  base?: string;
  maintainer_can_modify?: boolean;
  number?: number;
};
type PullsUpdate_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsListCommits_Options = {
  owner: string;
  repo: string;
  pull_number: number;
  per_page?: number;
  page?: number;
  number?: number;
};
type PullsListCommits_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsListFiles_Options = {
  owner: string;
  repo: string;
  pull_number: number;
  per_page?: number;
  page?: number;
  number?: number;
};
type PullsListFiles_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsCheckIfMerged_Options = {
  owner: string;
  repo: string;
  pull_number: number;
  number?: number;
};
type PullsCheckIfMerged_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsMerge_Options = {
  owner: string;
  repo: string;
  pull_number: number;
  commit_title?: string;
  commit_message?: string;
  sha?: string;
  merge_method?: string;
  number?: number;
};
type PullsMerge_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsListComments_Options = {
  owner: string;
  repo: string;
  pull_number: number;
  sort?: string;
  direction?: string;
  since?: string;
  per_page?: number;
  page?: number;
  number?: number;
};
type PullsListComments_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsListCommentsForRepo_Options = {
  owner: string;
  repo: string;
  sort?: string;
  direction?: string;
  since?: string;
  per_page?: number;
  page?: number;
};
type PullsListCommentsForRepo_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsGetComment_Options = {
  owner: string;
  repo: string;
  comment_id: number;
};
type PullsGetComment_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsCreateComment_Options = {
  owner: string;
  repo: string;
  pull_number: number;
  body: string;
  commit_id: string;
  path: string;
  position: number;
  number?: number;
};
type PullsCreateComment_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsCreateCommentReply_Options = {
  owner: string;
  repo: string;
  pull_number: number;
  body: string;
  in_reply_to: number;
  number?: number;
};
type PullsCreateCommentReply_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsUpdateComment_Options = {
  owner: string;
  repo: string;
  comment_id: number;
  body: string;
};
type PullsUpdateComment_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsDeleteComment_Options = {
  owner: string;
  repo: string;
  comment_id: number;
};
type PullsDeleteComment_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsListReviewRequests_Options = {
  owner: string;
  repo: string;
  pull_number: number;
  per_page?: number;
  page?: number;
  number?: number;
};
type PullsListReviewRequests_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsCreateReviewRequest_Options = {
  owner: string;
  repo: string;
  pull_number: number;
  reviewers?: string[];
  team_reviewers?: string[];
  number?: number;
};
type PullsCreateReviewRequest_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsDeleteReviewRequest_Options = {
  owner: string;
  repo: string;
  pull_number: number;
  reviewers?: string[];
  team_reviewers?: string[];
  number?: number;
};
type PullsDeleteReviewRequest_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsListReviews_Options = {
  owner: string;
  repo: string;
  pull_number: number;
  per_page?: number;
  page?: number;
  number?: number;
};
type PullsListReviews_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsGetReview_Options = {
  owner: string;
  repo: string;
  pull_number: number;
  review_id: number;
  number?: number;
};
type PullsGetReview_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsDeletePendingReview_Options = {
  owner: string;
  repo: string;
  pull_number: number;
  review_id: number;
  number?: number;
};
type PullsDeletePendingReview_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsGetCommentsForReview_Options = {
  owner: string;
  repo: string;
  pull_number: number;
  review_id: number;
  per_page?: number;
  page?: number;
  number?: number;
};
type PullsGetCommentsForReview_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsCreateReview_Options = {
  owner: string;
  repo: string;
  pull_number: number;
  commit_id?: string;
  body?: string;
  event?: string;
  comments?: object[];
  "comments[].path": string;
  "comments[].position": number;
  "comments[].body": string;
  number?: number;
};
type PullsCreateReview_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsUpdateReview_Options = {
  owner: string;
  repo: string;
  pull_number: number;
  review_id: number;
  body: string;
  number?: number;
};
type PullsUpdateReview_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsSubmitReview_Options = {
  owner: string;
  repo: string;
  pull_number: number;
  review_id: number;
  body?: string;
  event: string;
  number?: number;
};
type PullsSubmitReview_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type PullsDismissReview_Options = {
  owner: string;
  repo: string;
  pull_number: number;
  review_id: number;
  message: string;
  number?: number;
};
type PullsDismissReview_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type RateLimitGet_Options = {};
type RateLimitGet_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReactionsListForCommitComment_Options = {
  owner: string;
  repo: string;
  comment_id: number;
  content?: string;
  per_page?: number;
  page?: number;
};
type ReactionsListForCommitComment_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReactionsCreateForCommitComment_Options = {
  owner: string;
  repo: string;
  comment_id: number;
  content: string;
};
type ReactionsCreateForCommitComment_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReactionsListForIssue_Options = {
  owner: string;
  repo: string;
  issue_number: number;
  content?: string;
  per_page?: number;
  page?: number;
  number?: number;
};
type ReactionsListForIssue_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReactionsCreateForIssue_Options = {
  owner: string;
  repo: string;
  issue_number: number;
  content: string;
  number?: number;
};
type ReactionsCreateForIssue_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReactionsListForIssueComment_Options = {
  owner: string;
  repo: string;
  comment_id: number;
  content?: string;
  per_page?: number;
  page?: number;
};
type ReactionsListForIssueComment_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReactionsCreateForIssueComment_Options = {
  owner: string;
  repo: string;
  comment_id: number;
  content: string;
};
type ReactionsCreateForIssueComment_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReactionsListForPullRequestReviewComment_Options = {
  owner: string;
  repo: string;
  comment_id: number;
  content?: string;
  per_page?: number;
  page?: number;
};
type ReactionsListForPullRequestReviewComment_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReactionsCreateForPullRequestReviewComment_Options = {
  owner: string;
  repo: string;
  comment_id: number;
  content: string;
};
type ReactionsCreateForPullRequestReviewComment_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReactionsListForTeamDiscussion_Options = {
  team_id: number;
  discussion_number: number;
  content?: string;
  per_page?: number;
  page?: number;
};
type ReactionsListForTeamDiscussion_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReactionsCreateForTeamDiscussion_Options = {
  team_id: number;
  discussion_number: number;
  content: string;
};
type ReactionsCreateForTeamDiscussion_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReactionsListForTeamDiscussionComment_Options = {
  team_id: number;
  discussion_number: number;
  comment_number: number;
  content?: string;
  per_page?: number;
  page?: number;
};
type ReactionsListForTeamDiscussionComment_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReactionsCreateForTeamDiscussionComment_Options = {
  team_id: number;
  discussion_number: number;
  comment_number: number;
  content: string;
};
type ReactionsCreateForTeamDiscussionComment_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReactionsDelete_Options = {
  reaction_id: number;
};
type ReactionsDelete_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposList_Options = {
  visibility?: string;
  affiliation?: string;
  type?: string;
  sort?: string;
  direction?: string;
  per_page?: number;
  page?: number;
};
type ReposList_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListForUser_Options = {
  username: string;
  type?: string;
  sort?: string;
  direction?: string;
  per_page?: number;
  page?: number;
};
type ReposListForUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListForOrg_Options = {
  org: string;
  type?: string;
  sort?: string;
  direction?: string;
  per_page?: number;
  page?: number;
};
type ReposListForOrg_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListPublic_Options = {
  since?: string;
  per_page?: number;
  page?: number;
};
type ReposListPublic_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposCreateForAuthenticatedUser_Options = {
  name: string;
  description?: string;
  homepage?: string;
  private?: boolean;
  has_issues?: boolean;
  has_projects?: boolean;
  has_wiki?: boolean;
  team_id?: number;
  auto_init?: boolean;
  gitignore_template?: string;
  license_template?: string;
  allow_squash_merge?: boolean;
  allow_merge_commit?: boolean;
  allow_rebase_merge?: boolean;
};
type ReposCreateForAuthenticatedUser_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposCreateInOrg_Options = {
  org: string;
  name: string;
  description?: string;
  homepage?: string;
  private?: boolean;
  has_issues?: boolean;
  has_projects?: boolean;
  has_wiki?: boolean;
  team_id?: number;
  auto_init?: boolean;
  gitignore_template?: string;
  license_template?: string;
  allow_squash_merge?: boolean;
  allow_merge_commit?: boolean;
  allow_rebase_merge?: boolean;
};
type ReposCreateInOrg_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGet_Options = {
  owner: string;
  repo: string;
};
type ReposGet_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposUpdate_Options = {
  owner: string;
  repo: string;
  name: string;
  description?: string;
  homepage?: string;
  private?: boolean;
  has_issues?: boolean;
  has_projects?: boolean;
  has_wiki?: boolean;
  default_branch?: string;
  allow_squash_merge?: boolean;
  allow_merge_commit?: boolean;
  allow_rebase_merge?: boolean;
  archived?: boolean;
};
type ReposUpdate_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListTopics_Options = {
  owner: string;
  repo: string;
};
type ReposListTopics_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposReplaceTopics_Options = {
  owner: string;
  repo: string;
  names: string[];
};
type ReposReplaceTopics_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposEnableVulnerabilityAlerts_Options = {
  owner: string;
  repo: string;
};
type ReposEnableVulnerabilityAlerts_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposDisableVulnerabilityAlerts_Options = {
  owner: string;
  repo: string;
};
type ReposDisableVulnerabilityAlerts_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListContributors_Options = {
  owner: string;
  repo: string;
  anon?: string;
  per_page?: number;
  page?: number;
};
type ReposListContributors_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListLanguages_Options = {
  owner: string;
  repo: string;
};
type ReposListLanguages_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListTeams_Options = {
  owner: string;
  repo: string;
  per_page?: number;
  page?: number;
};
type ReposListTeams_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListTags_Options = {
  owner: string;
  repo: string;
  per_page?: number;
  page?: number;
};
type ReposListTags_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposDelete_Options = {
  owner: string;
  repo: string;
};
type ReposDelete_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposTransfer_Options = {
  owner: string;
  repo: string;
  new_owner?: string;
  team_ids?: number[];
};
type ReposTransfer_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListBranches_Options = {
  owner: string;
  repo: string;
  protected?: boolean;
  per_page?: number;
  page?: number;
};
type ReposListBranches_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetBranch_Options = {
  owner: string;
  repo: string;
  branch: string;
};
type ReposGetBranch_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetBranchProtection_Options = {
  owner: string;
  repo: string;
  branch: string;
};
type ReposGetBranchProtection_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposUpdateBranchProtection_Options = {
  owner: string;
  repo: string;
  branch: string;
  required_status_checks: object | null;
  "required_status_checks.strict": boolean;
  "required_status_checks.contexts": string[];
  enforce_admins: boolean | null;
  required_pull_request_reviews: object | null;
  "required_pull_request_reviews.dismissal_restrictions"?: object;
  "required_pull_request_reviews.dismissal_restrictions.users"?: string[];
  "required_pull_request_reviews.dismissal_restrictions.teams"?: string[];
  "required_pull_request_reviews.dismiss_stale_reviews"?: boolean;
  "required_pull_request_reviews.require_code_owner_reviews"?: boolean;
  "required_pull_request_reviews.required_approving_review_count"?: number;
  restrictions: object | null;
  "restrictions.users"?: string[];
  "restrictions.teams"?: string[];
};
type ReposUpdateBranchProtection_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposRemoveBranchProtection_Options = {
  owner: string;
  repo: string;
  branch: string;
};
type ReposRemoveBranchProtection_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetProtectedBranchRequiredStatusChecks_Options = {
  owner: string;
  repo: string;
  branch: string;
};
type ReposGetProtectedBranchRequiredStatusChecks_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposUpdateProtectedBranchRequiredStatusChecks_Options = {
  owner: string;
  repo: string;
  branch: string;
  strict?: boolean;
  contexts?: string[];
};
type ReposUpdateProtectedBranchRequiredStatusChecks_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposRemoveProtectedBranchRequiredStatusChecks_Options = {
  owner: string;
  repo: string;
  branch: string;
};
type ReposRemoveProtectedBranchRequiredStatusChecks_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListProtectedBranchRequiredStatusChecksContexts_Options = {
  owner: string;
  repo: string;
  branch: string;
};
type ReposListProtectedBranchRequiredStatusChecksContexts_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposReplaceProtectedBranchRequiredStatusChecksContexts_Options = {
  owner: string;
  repo: string;
  branch: string;
  contexts: string[];
};
type ReposReplaceProtectedBranchRequiredStatusChecksContexts_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposAddProtectedBranchRequiredStatusChecksContexts_Options = {
  owner: string;
  repo: string;
  branch: string;
  contexts: string[];
};
type ReposAddProtectedBranchRequiredStatusChecksContexts_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposRemoveProtectedBranchRequiredStatusChecksContexts_Options = {
  owner: string;
  repo: string;
  branch: string;
  contexts: string[];
};
type ReposRemoveProtectedBranchRequiredStatusChecksContexts_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetProtectedBranchPullRequestReviewEnforcement_Options = {
  owner: string;
  repo: string;
  branch: string;
};
type ReposGetProtectedBranchPullRequestReviewEnforcement_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposUpdateProtectedBranchPullRequestReviewEnforcement_Options = {
  owner: string;
  repo: string;
  branch: string;
  dismissal_restrictions?: object;
  "dismissal_restrictions.users"?: string[];
  "dismissal_restrictions.teams"?: string[];
  dismiss_stale_reviews?: boolean;
  require_code_owner_reviews?: boolean;
  required_approving_review_count?: number;
};
type ReposUpdateProtectedBranchPullRequestReviewEnforcement_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposRemoveProtectedBranchPullRequestReviewEnforcement_Options = {
  owner: string;
  repo: string;
  branch: string;
};
type ReposRemoveProtectedBranchPullRequestReviewEnforcement_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetProtectedBranchRequiredSignatures_Options = {
  owner: string;
  repo: string;
  branch: string;
};
type ReposGetProtectedBranchRequiredSignatures_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposAddProtectedBranchRequiredSignatures_Options = {
  owner: string;
  repo: string;
  branch: string;
};
type ReposAddProtectedBranchRequiredSignatures_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposRemoveProtectedBranchRequiredSignatures_Options = {
  owner: string;
  repo: string;
  branch: string;
};
type ReposRemoveProtectedBranchRequiredSignatures_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetProtectedBranchAdminEnforcement_Options = {
  owner: string;
  repo: string;
  branch: string;
};
type ReposGetProtectedBranchAdminEnforcement_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposAddProtectedBranchAdminEnforcement_Options = {
  owner: string;
  repo: string;
  branch: string;
};
type ReposAddProtectedBranchAdminEnforcement_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposRemoveProtectedBranchAdminEnforcement_Options = {
  owner: string;
  repo: string;
  branch: string;
};
type ReposRemoveProtectedBranchAdminEnforcement_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetProtectedBranchRestrictions_Options = {
  owner: string;
  repo: string;
  branch: string;
};
type ReposGetProtectedBranchRestrictions_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposRemoveProtectedBranchRestrictions_Options = {
  owner: string;
  repo: string;
  branch: string;
};
type ReposRemoveProtectedBranchRestrictions_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListProtectedBranchTeamRestrictions_Options = {
  owner: string;
  repo: string;
  branch: string;
  per_page?: number;
  page?: number;
};
type ReposListProtectedBranchTeamRestrictions_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposReplaceProtectedBranchTeamRestrictions_Options = {
  owner: string;
  repo: string;
  branch: string;
  teams: string[];
};
type ReposReplaceProtectedBranchTeamRestrictions_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposAddProtectedBranchTeamRestrictions_Options = {
  owner: string;
  repo: string;
  branch: string;
  teams: string[];
};
type ReposAddProtectedBranchTeamRestrictions_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposRemoveProtectedBranchTeamRestrictions_Options = {
  owner: string;
  repo: string;
  branch: string;
  teams: string[];
};
type ReposRemoveProtectedBranchTeamRestrictions_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListProtectedBranchUserRestrictions_Options = {
  owner: string;
  repo: string;
  branch: string;
};
type ReposListProtectedBranchUserRestrictions_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposReplaceProtectedBranchUserRestrictions_Options = {
  owner: string;
  repo: string;
  branch: string;
  users: string[];
};
type ReposReplaceProtectedBranchUserRestrictions_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposAddProtectedBranchUserRestrictions_Options = {
  owner: string;
  repo: string;
  branch: string;
  users: string[];
};
type ReposAddProtectedBranchUserRestrictions_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposRemoveProtectedBranchUserRestrictions_Options = {
  owner: string;
  repo: string;
  branch: string;
  users: string[];
};
type ReposRemoveProtectedBranchUserRestrictions_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListCollaborators_Options = {
  owner: string;
  repo: string;
  affiliation?: string;
  per_page?: number;
  page?: number;
};
type ReposListCollaborators_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposCheckCollaborator_Options = {
  owner: string;
  repo: string;
  username: string;
};
type ReposCheckCollaborator_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetCollaboratorPermissionLevel_Options = {
  owner: string;
  repo: string;
  username: string;
};
type ReposGetCollaboratorPermissionLevel_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposAddCollaborator_Options = {
  owner: string;
  repo: string;
  username: string;
  permission?: string;
};
type ReposAddCollaborator_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposRemoveCollaborator_Options = {
  owner: string;
  repo: string;
  username: string;
};
type ReposRemoveCollaborator_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListCommitComments_Options = {
  owner: string;
  repo: string;
  per_page?: number;
  page?: number;
};
type ReposListCommitComments_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListCommentsForCommit_Options = {
  owner: string;
  repo: string;
  ref: string;
  per_page?: number;
  page?: number;
};
type ReposListCommentsForCommit_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposCreateCommitComment_Options = {
  owner: string;
  repo: string;
  sha: string;
  body: string;
  path?: string;
  position?: number;
  line?: number;
};
type ReposCreateCommitComment_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetCommitComment_Options = {
  owner: string;
  repo: string;
  comment_id: number;
};
type ReposGetCommitComment_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposUpdateCommitComment_Options = {
  owner: string;
  repo: string;
  comment_id: number;
  body: string;
};
type ReposUpdateCommitComment_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposDeleteCommitComment_Options = {
  owner: string;
  repo: string;
  comment_id: number;
};
type ReposDeleteCommitComment_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListCommits_Options = {
  owner: string;
  repo: string;
  sha?: string;
  path?: string;
  author?: string;
  since?: string;
  until?: string;
  per_page?: number;
  page?: number;
};
type ReposListCommits_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetCommit_Options = {
  owner: string;
  repo: string;
  commit_sha: string;
  sha?: string;
};
type ReposGetCommit_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetCommitRefSha_Options = {
  owner: string;
  repo: string;
  ref: string;
};
type ReposGetCommitRefSha_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposCompareCommits_Options = {
  owner: string;
  repo: string;
  base: string;
  head: string;
};
type ReposCompareCommits_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListBranchesForHeadCommit_Options = {
  owner: string;
  repo: string;
  commit_sha: string;
};
type ReposListBranchesForHeadCommit_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListPullRequestsAssociatedWithCommit_Options = {
  owner: string;
  repo: string;
  commit_sha: string;
  per_page?: number;
  page?: number;
};
type ReposListPullRequestsAssociatedWithCommit_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposRetrieveCommunityProfileMetrics_Options = {
  owner: string;
  repo: string;
};
type ReposRetrieveCommunityProfileMetrics_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetReadme_Options = {
  owner: string;
  repo: string;
  ref?: string;
};
type ReposGetReadme_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetContents_Options = {
  owner: string;
  repo: string;
  path: string;
  ref?: string;
};
type ReposGetContents_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposCreateFile_Options = {
  owner: string;
  repo: string;
  path: string;
  message: string;
  content: string;
  branch?: string;
  committer?: object;
  "committer.name": string;
  "committer.email": string;
  author?: object;
  "author.name": string;
  "author.email": string;
};
type ReposCreateFile_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposUpdateFile_Options = {
  owner: string;
  repo: string;
  path: string;
  message: string;
  content: string;
  sha: string;
  branch?: string;
  committer?: object;
  "committer.name": string;
  "committer.email": string;
  author?: object;
  "author.name": string;
  "author.email": string;
};
type ReposUpdateFile_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposDeleteFile_Options = {
  owner: string;
  repo: string;
  path: string;
  message: string;
  sha: string;
  branch?: string;
  committer?: object;
  author?: object;
};
type ReposDeleteFile_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetArchiveLink_Options = {
  owner: string;
  repo: string;
  archive_format: string;
  ref: string;
};
type ReposGetArchiveLink_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListDeployments_Options = {
  owner: string;
  repo: string;
  sha?: string;
  ref?: string;
  task?: string;
  environment?: string;
  per_page?: number;
  page?: number;
};
type ReposListDeployments_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetDeployment_Options = {
  owner: string;
  repo: string;
  deployment_id: number;
};
type ReposGetDeployment_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposCreateDeployment_Options = {
  owner: string;
  repo: string;
  ref: string;
  task?: string;
  auto_merge?: boolean;
  required_contexts?: string[];
  payload?: string;
  environment?: string;
  description?: string;
  transient_environment?: boolean;
  production_environment?: boolean;
};
type ReposCreateDeployment_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListDeploymentStatuses_Options = {
  owner: string;
  repo: string;
  deployment_id: number;
  per_page?: number;
  page?: number;
};
type ReposListDeploymentStatuses_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetDeploymentStatus_Options = {
  owner: string;
  repo: string;
  deployment_id: number;
  status_id: number;
};
type ReposGetDeploymentStatus_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposCreateDeploymentStatus_Options = {
  owner: string;
  repo: string;
  deployment_id: number;
  state: string;
  target_url?: string;
  log_url?: string;
  description?: string;
  environment?: string;
  environment_url?: string;
  auto_inactive?: boolean;
};
type ReposCreateDeploymentStatus_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListDownloads_Options = {
  owner: string;
  repo: string;
  per_page?: number;
  page?: number;
};
type ReposListDownloads_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetDownload_Options = {
  owner: string;
  repo: string;
  download_id: number;
};
type ReposGetDownload_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposDeleteDownload_Options = {
  owner: string;
  repo: string;
  download_id: number;
};
type ReposDeleteDownload_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListForks_Options = {
  owner: string;
  repo: string;
  sort?: string;
  per_page?: number;
  page?: number;
};
type ReposListForks_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposCreateFork_Options = {
  owner: string;
  repo: string;
  organization?: string;
};
type ReposCreateFork_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListHooks_Options = {
  owner: string;
  repo: string;
  per_page?: number;
  page?: number;
};
type ReposListHooks_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetHook_Options = {
  owner: string;
  repo: string;
  hook_id: number;
};
type ReposGetHook_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposCreateHook_Options = {
  owner: string;
  repo: string;
  name?: string;
  config: object;
  "config.url": string;
  "config.content_type"?: string;
  "config.secret"?: string;
  "config.insecure_ssl"?: string;
  events?: string[];
  active?: boolean;
};
type ReposCreateHook_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposUpdateHook_Options = {
  owner: string;
  repo: string;
  hook_id: number;
  config?: object;
  "config.url": string;
  "config.content_type"?: string;
  "config.secret"?: string;
  "config.insecure_ssl"?: string;
  events?: string[];
  add_events?: string[];
  remove_events?: string[];
  active?: boolean;
};
type ReposUpdateHook_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposTestPushHook_Options = {
  owner: string;
  repo: string;
  hook_id: number;
};
type ReposTestPushHook_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposPingHook_Options = {
  owner: string;
  repo: string;
  hook_id: number;
};
type ReposPingHook_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposDeleteHook_Options = {
  owner: string;
  repo: string;
  hook_id: number;
};
type ReposDeleteHook_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListInvitations_Options = {
  owner: string;
  repo: string;
  per_page?: number;
  page?: number;
};
type ReposListInvitations_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposDeleteInvitation_Options = {
  owner: string;
  repo: string;
  invitation_id: number;
};
type ReposDeleteInvitation_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposUpdateInvitation_Options = {
  owner: string;
  repo: string;
  invitation_id: number;
  permissions?: string;
};
type ReposUpdateInvitation_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListInvitationsForAuthenticatedUser_Options = {
  per_page?: number;
  page?: number;
};
type ReposListInvitationsForAuthenticatedUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposAcceptInvitation_Options = {
  invitation_id: number;
};
type ReposAcceptInvitation_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposDeclineInvitation_Options = {
  invitation_id: number;
};
type ReposDeclineInvitation_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListDeployKeys_Options = {
  owner: string;
  repo: string;
  per_page?: number;
  page?: number;
};
type ReposListDeployKeys_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetDeployKey_Options = {
  owner: string;
  repo: string;
  key_id: number;
};
type ReposGetDeployKey_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposAddDeployKey_Options = {
  owner: string;
  repo: string;
  title?: string;
  key: string;
  read_only?: boolean;
};
type ReposAddDeployKey_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposRemoveDeployKey_Options = {
  owner: string;
  repo: string;
  key_id: number;
};
type ReposRemoveDeployKey_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposMerge_Options = {
  owner: string;
  repo: string;
  base: string;
  head: string;
  commit_message?: string;
};
type ReposMerge_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetPages_Options = {
  owner: string;
  repo: string;
};
type ReposGetPages_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposEnablePagesSite_Options = {
  owner: string;
  repo: string;
  "source[branch]"?: string;
  "source[path]"?: string;
};
type ReposEnablePagesSite_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposDisablePagesSite_Options = {
  owner: string;
  repo: string;
};
type ReposDisablePagesSite_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposUpdateInformationAboutPagesSite_Options = {
  owner: string;
  repo: string;
  cname?: string;
  source?: string;
};
type ReposUpdateInformationAboutPagesSite_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposRequestPageBuild_Options = {
  owner: string;
  repo: string;
};
type ReposRequestPageBuild_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListPagesBuilds_Options = {
  owner: string;
  repo: string;
  per_page?: number;
  page?: number;
};
type ReposListPagesBuilds_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetLatestPagesBuild_Options = {
  owner: string;
  repo: string;
};
type ReposGetLatestPagesBuild_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetPagesBuild_Options = {
  owner: string;
  repo: string;
  build_id: number;
};
type ReposGetPagesBuild_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListReleases_Options = {
  owner: string;
  repo: string;
  per_page?: number;
  page?: number;
};
type ReposListReleases_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetRelease_Options = {
  owner: string;
  repo: string;
  release_id: number;
};
type ReposGetRelease_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetLatestRelease_Options = {
  owner: string;
  repo: string;
};
type ReposGetLatestRelease_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetReleaseByTag_Options = {
  owner: string;
  repo: string;
  tag: string;
};
type ReposGetReleaseByTag_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposCreateRelease_Options = {
  owner: string;
  repo: string;
  tag_name: string;
  target_commitish?: string;
  name?: string;
  body?: string;
  draft?: boolean;
  prerelease?: boolean;
};
type ReposCreateRelease_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposUpdateRelease_Options = {
  owner: string;
  repo: string;
  release_id: number;
  tag_name?: string;
  target_commitish?: string;
  name?: string;
  body?: string;
  draft?: boolean;
  prerelease?: boolean;
};
type ReposUpdateRelease_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposDeleteRelease_Options = {
  owner: string;
  repo: string;
  release_id: number;
};
type ReposDeleteRelease_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListAssetsForRelease_Options = {
  owner: string;
  repo: string;
  release_id: number;
  per_page?: number;
  page?: number;
};
type ReposListAssetsForRelease_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposUploadReleaseAsset_Options = {
  url: string;
  headers: object;
  "headers.content-length": number;
  "headers.content-type": string;
  name: string;
  label?: string;
  file: string | object;
};
type ReposUploadReleaseAsset_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetReleaseAsset_Options = {
  owner: string;
  repo: string;
  asset_id: number;
};
type ReposGetReleaseAsset_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposUpdateReleaseAsset_Options = {
  owner: string;
  repo: string;
  asset_id: number;
  name?: string;
  label?: string;
};
type ReposUpdateReleaseAsset_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposDeleteReleaseAsset_Options = {
  owner: string;
  repo: string;
  asset_id: number;
};
type ReposDeleteReleaseAsset_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetContributorsStats_Options = {
  owner: string;
  repo: string;
};
type ReposGetContributorsStats_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetCommitActivityStats_Options = {
  owner: string;
  repo: string;
};
type ReposGetCommitActivityStats_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetCodeFrequencyStats_Options = {
  owner: string;
  repo: string;
};
type ReposGetCodeFrequencyStats_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetParticipationStats_Options = {
  owner: string;
  repo: string;
};
type ReposGetParticipationStats_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetPunchCardStats_Options = {
  owner: string;
  repo: string;
};
type ReposGetPunchCardStats_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposCreateStatus_Options = {
  owner: string;
  repo: string;
  sha: string;
  state: string;
  target_url?: string;
  description?: string;
  context?: string;
};
type ReposCreateStatus_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposListStatusesForRef_Options = {
  owner: string;
  repo: string;
  ref: string;
  per_page?: number;
  page?: number;
};
type ReposListStatusesForRef_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetCombinedStatusForRef_Options = {
  owner: string;
  repo: string;
  ref: string;
};
type ReposGetCombinedStatusForRef_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetTopReferrers_Options = {
  owner: string;
  repo: string;
};
type ReposGetTopReferrers_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetTopPaths_Options = {
  owner: string;
  repo: string;
};
type ReposGetTopPaths_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetViews_Options = {
  owner: string;
  repo: string;
  per?: string;
};
type ReposGetViews_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ReposGetClones_Options = {
  owner: string;
  repo: string;
  per?: string;
};
type ReposGetClones_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ScimListProvisionedIdentities_Options = {
  org: string;
  startIndex?: number;
  count?: number;
  filter?: string;
};
type ScimListProvisionedIdentities_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ScimGetProvisioningDetailsForUser_Options = {
  org: string;
  scim_user_id: number;
  external_identity_guid?: number;
};
type ScimGetProvisioningDetailsForUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ScimProvisionAndInviteUsers_Options = {
  org: string;
};
type ScimProvisionAndInviteUsers_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ScimProvisionInviteUsers_Options = {
  org: string;
};
type ScimProvisionInviteUsers_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ScimReplaceProvisionedUserInformation_Options = {
  org: string;
  scim_user_id: number;
  external_identity_guid?: number;
};
type ScimReplaceProvisionedUserInformation_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ScimUpdateProvisionedOrgMembership_Options = {
  org: string;
  scim_user_id: number;
  external_identity_guid?: number;
};
type ScimUpdateProvisionedOrgMembership_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ScimUpdateUserAttribute_Options = {
  org: string;
  scim_user_id: number;
  external_identity_guid?: number;
};
type ScimUpdateUserAttribute_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type ScimRemoveUserFromOrg_Options = {
  org: string;
  scim_user_id: number;
  external_identity_guid?: number;
};
type ScimRemoveUserFromOrg_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type SearchRepos_Options = {
  q: string;
  sort?: string;
  order?: string;
  per_page?: number;
  page?: number;
};
type SearchRepos_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type SearchCommits_Options = {
  q: string;
  sort?: string;
  order?: string;
  per_page?: number;
  page?: number;
};
type SearchCommits_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type SearchCode_Options = {
  q: string;
  sort?: string;
  order?: string;
  per_page?: number;
  page?: number;
};
type SearchCode_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type SearchIssuesAndPullRequests_Options = {
  q: string;
  sort?: string;
  order?: string;
  per_page?: number;
  page?: number;
};
type SearchIssuesAndPullRequests_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type SearchIssues_Options = {
  q: string;
  sort?: string;
  order?: string;
  per_page?: number;
  page?: number;
};
type SearchIssues_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type SearchUsers_Options = {
  q: string;
  sort?: string;
  order?: string;
  per_page?: number;
  page?: number;
};
type SearchUsers_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type SearchTopics_Options = {
  q: string;
};
type SearchTopics_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type SearchLabels_Options = {
  repository_id: number;
  q: string;
  sort?: string;
  order?: string;
};
type SearchLabels_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type SearchIssuesLegacy_Options = {
  owner: string;
  repository: string;
  state: string;
  keyword: string;
};
type SearchIssuesLegacy_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type SearchReposLegacy_Options = {
  keyword: string;
  language?: string;
  start_page?: string;
  sort?: string;
  order?: string;
};
type SearchReposLegacy_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type SearchUsersLegacy_Options = {
  keyword: string;
  start_page?: string;
  sort?: string;
  order?: string;
};
type SearchUsersLegacy_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type SearchEmailLegacy_Options = {
  email: string;
};
type SearchEmailLegacy_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsList_Options = {
  org: string;
  per_page?: number;
  page?: number;
};
type TeamsList_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsGet_Options = {
  team_id: number;
};
type TeamsGet_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsGetByName_Options = {
  org: string;
  team_slug: string;
};
type TeamsGetByName_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsCreate_Options = {
  org: string;
  name: string;
  description?: string;
  maintainers?: string[];
  repo_names?: string[];
  privacy?: string;
  permission?: string;
  parent_team_id?: number;
};
type TeamsCreate_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsUpdate_Options = {
  team_id: number;
  name: string;
  description?: string;
  privacy?: string;
  permission?: string;
  parent_team_id?: number;
};
type TeamsUpdate_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsDelete_Options = {
  team_id: number;
};
type TeamsDelete_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsListChild_Options = {
  team_id: number;
  per_page?: number;
  page?: number;
};
type TeamsListChild_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsListRepos_Options = {
  team_id: number;
  per_page?: number;
  page?: number;
};
type TeamsListRepos_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsCheckManagesRepo_Options = {
  team_id: number;
  owner: string;
  repo: string;
};
type TeamsCheckManagesRepo_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsAddOrUpdateRepo_Options = {
  team_id: number;
  owner: string;
  repo: string;
  permission?: string;
};
type TeamsAddOrUpdateRepo_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsRemoveRepo_Options = {
  team_id: number;
  owner: string;
  repo: string;
};
type TeamsRemoveRepo_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsListForAuthenticatedUser_Options = {
  per_page?: number;
  page?: number;
};
type TeamsListForAuthenticatedUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsListProjects_Options = {
  team_id: number;
  per_page?: number;
  page?: number;
};
type TeamsListProjects_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsReviewProject_Options = {
  team_id: number;
  project_id: number;
};
type TeamsReviewProject_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsAddOrUpdateProject_Options = {
  team_id: number;
  project_id: number;
  permission?: string;
};
type TeamsAddOrUpdateProject_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsRemoveProject_Options = {
  team_id: number;
  project_id: number;
};
type TeamsRemoveProject_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsListDiscussionComments_Options = {
  team_id: number;
  discussion_number: number;
  direction?: string;
  per_page?: number;
  page?: number;
};
type TeamsListDiscussionComments_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsGetDiscussionComment_Options = {
  team_id: number;
  discussion_number: number;
  comment_number: number;
};
type TeamsGetDiscussionComment_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsCreateDiscussionComment_Options = {
  team_id: number;
  discussion_number: number;
  body: string;
};
type TeamsCreateDiscussionComment_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsUpdateDiscussionComment_Options = {
  team_id: number;
  discussion_number: number;
  comment_number: number;
  body: string;
};
type TeamsUpdateDiscussionComment_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsDeleteDiscussionComment_Options = {
  team_id: number;
  discussion_number: number;
  comment_number: number;
};
type TeamsDeleteDiscussionComment_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsListDiscussions_Options = {
  team_id: number;
  direction?: string;
  per_page?: number;
  page?: number;
};
type TeamsListDiscussions_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsGetDiscussion_Options = {
  team_id: number;
  discussion_number: number;
};
type TeamsGetDiscussion_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsCreateDiscussion_Options = {
  team_id: number;
  title: string;
  body: string;
  private?: boolean;
};
type TeamsCreateDiscussion_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsUpdateDiscussion_Options = {
  team_id: number;
  discussion_number: number;
  title?: string;
  body?: string;
};
type TeamsUpdateDiscussion_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsDeleteDiscussion_Options = {
  team_id: number;
  discussion_number: number;
};
type TeamsDeleteDiscussion_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsListMembers_Options = {
  team_id: number;
  role?: string;
  per_page?: number;
  page?: number;
};
type TeamsListMembers_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsGetMember_Options = {
  team_id: number;
  username: string;
};
type TeamsGetMember_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsAddMember_Options = {
  team_id: number;
  username: string;
};
type TeamsAddMember_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsRemoveMember_Options = {
  team_id: number;
  username: string;
};
type TeamsRemoveMember_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsGetMembership_Options = {
  team_id: number;
  username: string;
};
type TeamsGetMembership_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsAddOrUpdateMembership_Options = {
  team_id: number;
  username: string;
  role?: string;
};
type TeamsAddOrUpdateMembership_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsRemoveMembership_Options = {
  team_id: number;
  username: string;
};
type TeamsRemoveMembership_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type TeamsListPendingInvitations_Options = {
  team_id: number;
  per_page?: number;
  page?: number;
};
type TeamsListPendingInvitations_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersGetByUsername_Options = {
  username: string;
};
type UsersGetByUsername_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersGetAuthenticated_Options = {};
type UsersGetAuthenticated_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersUpdateAuthenticated_Options = {
  name?: string;
  email?: string;
  blog?: string;
  company?: string;
  location?: string;
  hireable?: boolean;
  bio?: string;
};
type UsersUpdateAuthenticated_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersGetContextForUser_Options = {
  username: string;
  subject_type?: string;
  subject_id?: string;
};
type UsersGetContextForUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersList_Options = {
  since?: string;
  per_page?: number;
  page?: number;
};
type UsersList_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersListBlocked_Options = {};
type UsersListBlocked_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersCheckBlocked_Options = {
  username: string;
};
type UsersCheckBlocked_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersBlock_Options = {
  username: string;
};
type UsersBlock_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersUnblock_Options = {
  username: string;
};
type UsersUnblock_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersListEmails_Options = {
  per_page?: number;
  page?: number;
};
type UsersListEmails_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersListPublicEmails_Options = {
  per_page?: number;
  page?: number;
};
type UsersListPublicEmails_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersAddEmails_Options = {
  emails: string[];
};
type UsersAddEmails_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersDeleteEmails_Options = {
  emails: string[];
};
type UsersDeleteEmails_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersTogglePrimaryEmailVisibility_Options = {
  email: string;
  visibility: string;
};
type UsersTogglePrimaryEmailVisibility_RequestOptions = {
  method: "PATCH";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersListFollowersForUser_Options = {
  username: string;
  per_page?: number;
  page?: number;
};
type UsersListFollowersForUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersListFollowersForAuthenticatedUser_Options = {
  per_page?: number;
  page?: number;
};
type UsersListFollowersForAuthenticatedUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersListFollowingForUser_Options = {
  username: string;
  per_page?: number;
  page?: number;
};
type UsersListFollowingForUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersListFollowingForAuthenticatedUser_Options = {
  per_page?: number;
  page?: number;
};
type UsersListFollowingForAuthenticatedUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersCheckFollowing_Options = {
  username: string;
};
type UsersCheckFollowing_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersCheckFollowingForUser_Options = {
  username: string;
  target_user: string;
};
type UsersCheckFollowingForUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersFollow_Options = {
  username: string;
};
type UsersFollow_RequestOptions = {
  method: "PUT";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersUnfollow_Options = {
  username: string;
};
type UsersUnfollow_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersListGpgKeysForUser_Options = {
  username: string;
  per_page?: number;
  page?: number;
};
type UsersListGpgKeysForUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersListGpgKeys_Options = {
  per_page?: number;
  page?: number;
};
type UsersListGpgKeys_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersGetGpgKey_Options = {
  gpg_key_id: number;
};
type UsersGetGpgKey_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersCreateGpgKey_Options = {
  armored_public_key?: string;
};
type UsersCreateGpgKey_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersDeleteGpgKey_Options = {
  gpg_key_id: number;
};
type UsersDeleteGpgKey_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersListPublicKeysForUser_Options = {
  username: string;
  per_page?: number;
  page?: number;
};
type UsersListPublicKeysForUser_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersListPublicKeys_Options = {
  per_page?: number;
  page?: number;
};
type UsersListPublicKeys_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersGetPublicKey_Options = {
  key_id: number;
};
type UsersGetPublicKey_RequestOptions = {
  method: "GET";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersCreatePublicKey_Options = {
  title?: string;
  key?: string;
};
type UsersCreatePublicKey_RequestOptions = {
  method: "POST";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
type UsersDeletePublicKey_Options = {
  key_id: number;
};
type UsersDeletePublicKey_RequestOptions = {
  method: "DELETE";
  url: Url;
  headers: Headers;
  request: EndpointRequestOptions;
};
